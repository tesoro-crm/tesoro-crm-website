---
import { t } from '../../i18n/utils';
import type { Language } from '../../i18n/config';
import Button from '../ui/Button.astro';

interface Props {
  locale: Language;
}

const { locale } = Astro.props;

const headline = t('home.hero.headline', locale);
const tagline = t('home.hero.tagline', locale);
const subheadline = t('home.hero.subheadline', locale);
const ctaPrimary = t('home.hero.cta_primary', locale);
const ctaSecondary = t('home.hero.cta_secondary', locale);
const trust = [
  t('home.hero.trust_pricing', locale),
  t('home.hero.trust_integration', locale),
  t('home.hero.trust_commitment', locale),
];
const kanbanProposed = t('home.hero.kanban_proposed', locale);
const kanbanInterested = t('home.hero.kanban_interested', locale);
const kanbanRejected = t('home.hero.kanban_rejected', locale);
const properties = [
  t('home.hero.property_1', locale),
  t('home.hero.property_2', locale),
  t('home.hero.property_3', locale),
  t('home.hero.property_4', locale),
  t('home.hero.property_5', locale),
  t('home.hero.property_6', locale),
];
---

<section class="hero-simple">
  <div class="hero-simple__background" aria-hidden="true"></div>
  <div class="hero-simple__container">
    <div class="hero-simple__grid">
      <div class="hero-simple__content">
        <h1 class="hero-simple__headline">{headline}</h1>
        <p class="hero-simple__tagline">{tagline}</p>
        <p class="hero-simple__subheadline">{subheadline}</p>

        <div class="hero-simple__ctas">
          <Button variant="secondary" size="lg" data-modal-target="demo-modal">
            {ctaPrimary}
          </Button>
          <Button variant="outline" size="lg" data-video-modal-target="video-modal">
            {ctaSecondary}
          </Button>
        </div>

        <div class="hero-simple__trust-grid">
          <div class="hero-simple__trust-column">
            {trust.slice(0, 3).map((item) => (
              <div class="hero-simple__trust-item">
                <span class="icon hero-simple__trust-icon">check</span>
                <span class="hero-simple__trust-text">{item}</span>
              </div>
            ))}
          </div>
          <div class="hero-simple__trust-column">
            {trust.slice(3, 6).map((item) => (
              <div class="hero-simple__trust-item">
                <span class="icon hero-simple__trust-icon">check</span>
                <span class="hero-simple__trust-text">{item}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div class="hero-simple__visual">
        <div class="hero-simple__glow" aria-hidden="true"></div>
        <div class="hero-simple__kanban" data-kanban>
          <div class="hero-simple__kanban-stage" data-stage="0">
            <div class="hero-simple__kanban-header">
              <span class="hero-simple__kanban-title">{kanbanProposed}</span>
              <span class="hero-simple__kanban-count">4</span>
            </div>
            <div class="hero-simple__kanban-cards" data-kanban-cards>
              <div class="hero-simple__property-card" data-property-card="main">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[0]}</span>
                </div>
              </div>
              <div class="hero-simple__property-card hero-simple__property-card--static">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[1]}</span>
                </div>
              </div>
              <div class="hero-simple__property-card hero-simple__property-card--static">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[2]}</span>
                </div>
              </div>
              <div class="hero-simple__property-card hero-simple__property-card--static">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[5]}</span>
                </div>
              </div>
            </div>
          </div>
          <div class="hero-simple__kanban-stage" data-stage="1">
            <div class="hero-simple__kanban-header">
              <span class="hero-simple__kanban-title">{kanbanInterested}</span>
              <span class="hero-simple__kanban-count">2</span>
            </div>
            <div class="hero-simple__kanban-cards" data-kanban-cards>
              <div class="hero-simple__property-card hero-simple__property-card--static" data-property-card="second">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[3]}</span>
                </div>
              </div>
              <div class="hero-simple__property-card hero-simple__property-card--static">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[4]}</span>
                </div>
              </div>
            </div>
          </div>
          <div class="hero-simple__kanban-stage" data-stage="2">
            <div class="hero-simple__kanban-header">
              <span class="hero-simple__kanban-title">{kanbanRejected}</span>
              <span class="hero-simple__kanban-count">1</span>
            </div>
            <div class="hero-simple__kanban-cards" data-kanban-cards>
              <div class="hero-simple__property-card hero-simple__property-card--static">
                <div class="hero-simple__property-image"></div>
                <div class="hero-simple__property-info">
                  <span class="hero-simple__property-name">{properties[1]}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

  <script>
    function initKanbanAnimation() {
      const kanban = document.querySelector('[data-kanban]');

      // Disable animations on mobile (< 1024px) or if user prefers reduced motion
      if (!kanban || window.matchMedia('(prefers-reduced-motion: reduce)').matches || window.matchMedia('(max-width: 1023px)').matches) {
        return;
      }

      let intervalId: number | null = null;
      let isAnimating = false;

      // Get all stages
      const stages = kanban.querySelectorAll('[data-stage]') as NodeListOf<HTMLElement>;
      const proposedStage = stages[0];
      const interestedStage = stages[1];
      const rejectedStage = stages[2];

      // Update stage counts
      const updateCounts = () => {
        stages.forEach((stage) => {
          const cards = stage.querySelectorAll('.hero-simple__property-card');
          const countEl = stage.querySelector('.hero-simple__kanban-count');
          if (countEl) {
            countEl.textContent = cards.length.toString();
          }
        });
      };

      // Animate card movement from one stage to another
      const animateCard = (card: HTMLElement, toStage: HTMLElement): Promise<void> => {
        return new Promise((resolve) => {
          const targetCards = toStage.querySelector('[data-kanban-cards]') as HTMLElement;
          if (!targetCards) {
            resolve();
            return;
          }

          const clone = card.cloneNode(true) as HTMLElement;
          const startRect = card.getBoundingClientRect();
          const kanbanRect = kanban.getBoundingClientRect();

          clone.style.position = 'absolute';
          clone.style.left = startRect.left - kanbanRect.left + 'px';
          clone.style.top = startRect.top - kanbanRect.top + 'px';
          clone.style.width = startRect.width + 'px';
          clone.style.zIndex = '10';
          clone.style.pointerEvents = 'none';
          clone.style.transform = 'rotate(-3deg)';
          clone.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';

          kanban.appendChild(clone);
          card.style.opacity = '0';

          // Move actual card to new stage
          targetCards.insertBefore(card, targetCards.firstChild);

          const endRect = card.getBoundingClientRect();
          requestAnimationFrame(() => {
            clone.style.left = endRect.left - kanbanRect.left + 'px';
            clone.style.top = endRect.top - kanbanRect.top + 'px';
            clone.style.transform = 'rotate(-2deg)';
          });

          setTimeout(() => {
            clone.remove();
            card.style.opacity = '1';
            updateCounts();
            resolve();
          }, 600);
        });
      };

      // Reset all cards back to "Proposed" stage
      const resetKanban = async () => {
        const proposedCards = proposedStage.querySelector('[data-kanban-cards]') as HTMLElement;
        if (!proposedCards) return;

        // Gather all cards from interested and rejected stages
        const interestedCards = Array.from(interestedStage.querySelectorAll('.hero-simple__property-card')) as HTMLElement[];
        const rejectedCards = Array.from(rejectedStage.querySelectorAll('.hero-simple__property-card')) as HTMLElement[];
        const allCards = [...interestedCards, ...rejectedCards];

        // Move all cards back to proposed (no animation, instant reset)
        allCards.forEach(card => {
          proposedCards.appendChild(card);
          card.style.opacity = '1';
        });

        updateCounts();
      };

      // Move one random card from Proposed to either Interested or Rejected
      const moveRandomCard = async () => {
        if (isAnimating) return;

        const proposedCards = Array.from(proposedStage.querySelectorAll('.hero-simple__property-card')) as HTMLElement[];

        // If no cards in Proposed, reset
        if (proposedCards.length === 0) {
          isAnimating = true;
          await resetKanban();
          isAnimating = false;
          return;
        }

        // Pick random card from Proposed
        const randomCard = proposedCards[Math.floor(Math.random() * proposedCards.length)];

        // Pick random destination: Interested (60%) or Rejected (40%)
        const destinationStage = Math.random() < 0.6 ? interestedStage : rejectedStage;

        isAnimating = true;
        await animateCard(randomCard, destinationStage);
        isAnimating = false;
      };

      // Start animation loop
      const startAnimation = () => {
        if (intervalId) clearInterval(intervalId);
        intervalId = window.setInterval(moveRandomCard, 2000);
      };

      // Pause animation
      const pauseAnimation = () => {
        if (intervalId) {
          clearInterval(intervalId);
          intervalId = null;
        }
      };

      // Initialize counts
      updateCounts();

      // Start animation
      startAnimation();

      // Pause on hover (desktop)
      kanban.addEventListener('mouseenter', pauseAnimation);
      kanban.addEventListener('mouseleave', startAnimation);

      // Pause on touch (mobile)
      kanban.addEventListener('touchstart', pauseAnimation, { passive: true });
    }

    // Run on initial load
    initKanbanAnimation();

    // Re-run after View Transitions
    document.addEventListener('astro:after-swap', initKanbanAnimation);
  </script>

<style>
  @media (min-width: 1024px) {
    .hero-simple {
      padding: 5rem 0 4rem;
    }
  }
  .hero-simple__background {
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at 0% 0%, rgba(255, 155, 67, 0.45), transparent 45%),
      radial-gradient(circle at 90% 10%, rgba(255, 107, 157, 0.4), transparent 50%),
      radial-gradient(circle at 50% 90%, rgba(10, 31, 68, 0.2), transparent 55%);
    transform: scale(1.1);
    animation: hero-gradient 18s ease-in-out infinite;
    opacity: 0.85;
    pointer-events: none;
    overflow: hidden;
  }

  .hero-simple__container {
    position: relative;
    z-index: 1;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .hero-simple__grid {
    display: grid;
    gap: 3rem;
    grid-template-columns: 1fr;
    align-items: center;
  }

  @media (min-width: 1024px) {
    .hero-simple__grid {
      grid-template-columns: 45% 55%;
      gap: 3rem;
      align-items: center;
    }
  }

  .hero-simple__content {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .hero-simple__badge {
    align-self: flex-start;
    padding: 0.4rem 1rem;
    border-radius: 9999px;
    background: rgba(255, 107, 157, 0.15);
    color: #ff6b9d;
    font-weight: 600;
    font-size: 0.85rem;
  }

  .hero-simple__headline {
    font-size: clamp(1.75rem, 4vw, 2.5rem);
    font-weight: 700;
    line-height: 1.2;
    color: #0a1f44;
    letter-spacing: -0.01em;
    margin-bottom: 0.75rem;
  }

  .hero-simple__tagline {
    font-size: clamp(1rem, 1.85vw, 1.15rem);
    font-style: italic;
    color: #64748b;
    max-width: 32rem;
    line-height: 1.5;
    margin-bottom: 1rem;
    font-weight: 400;
    letter-spacing: -0.005em;
  }

  .hero-simple__subheadline {
    font-size: clamp(0.95rem, 1.8vw, 1.1rem);
    color: rgba(10, 31, 68, 0.65);
    max-width: 32rem;
    line-height: 1.65;
  }

  .hero-simple__ctas {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 0.5rem;
  }


  .hero-simple__trust-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0 2rem;
    margin-top: 0.5rem;
  }

  .hero-simple__trust-column {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .hero-simple__trust-item {
    display: flex;
    align-items: center;
    gap: 0.6rem;
    font-size: 0.9rem;
    color: #64748b;
  }

  .hero-simple__trust-icon {
    color: #ff6b9d;
    font-size: 1.1rem;
    flex-shrink: 0;
  }

  .hero-simple__visual {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding: 1rem;
  }

  .hero-simple__glow {
    position: absolute;
    inset: 0;
    border-radius: 2rem;
    background: linear-gradient(145deg, rgba(255, 155, 67, 0.25), rgba(255, 107, 157, 0.15));
    filter: blur(35px);
  }

  .hero-simple__kanban {
    position: relative;
    width: 100%;
    max-width: 620px;
    height: 480px;
    background: white;
    border-radius: 1.25rem;
    padding: 1.5rem;
    box-shadow: 0 20px 60px rgba(10, 31, 68, 0.12), 0 0 0 1px rgba(10, 31, 68, 0.06);
    display: grid;
    grid-template-columns: repeat(3, 180px);
    gap: 1rem;
    justify-content: center;
    overflow: hidden;
  }

  .hero-simple__kanban-stage {
    display: flex;
    flex-direction: column;
    gap: 0.85rem;
  }

  .hero-simple__kanban-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.65rem 1rem;
    background: rgba(10, 31, 68, 0.05);
    border-radius: 0.65rem;
  }

  .hero-simple__kanban-title {
    font-size: 0.8rem;
    font-weight: 700;
    color: #0a1f44;
    text-transform: uppercase;
    letter-spacing: 0.06em;
  }

  .hero-simple__kanban-count {
    font-size: 0.75rem;
    font-weight: 700;
    color: #0a1f44;
    background: rgba(10, 31, 68, 0.1);
    padding: 0.125rem 0.5rem;
    border-radius: 9999px;
  }

  .hero-simple__kanban-cards {
    display: flex;
    flex-direction: column;
    gap: 0.6rem;
    flex: 1;
    padding: 0.6rem;
    background: rgba(10, 31, 68, 0.02);
    border-radius: 0.65rem;
    max-height: 420px;
    overflow: hidden;
    position: relative;
  }

  .hero-simple__kanban-cards::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 60px;
    background: linear-gradient(to bottom, transparent, rgba(10, 31, 68, 0.02) 70%);
    pointer-events: none;
    border-radius: 0 0 0.65rem 0.65rem;
  }

  .hero-simple__property-card {
    background: white;
    border-radius: 0.65rem;
    padding: 0.6rem;
    box-shadow: 0 2px 8px rgba(10, 31, 68, 0.08), 0 0 0 1px rgba(10, 31, 68, 0.06);
    cursor: grab;
    transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.3s ease;
    aspect-ratio: 1;
    display: flex;
    flex-direction: column;
    font-size: 0.8rem;
  }

  .hero-simple__property-card--static {
    cursor: default;
  }

  .hero-simple__property-card--static:hover {
    transform: none;
    box-shadow: 0 2px 8px rgba(10, 31, 68, 0.08), 0 0 0 1px rgba(10, 31, 68, 0.06);
  }

  .hero-simple__property-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(10, 31, 68, 0.15);
  }

  .hero-simple__property-image {
    width: 100%;
    flex: 1;
    background: linear-gradient(135deg, rgba(255, 155, 67, 0.12), rgba(255, 107, 157, 0.12));
    border-radius: 0.5rem;
    margin-bottom: 0.5rem;
    position: relative;
    overflow: hidden;
    min-height: 0;
  }

  .hero-simple__property-image::after {
    content: 'home';
    font-family: 'Material Symbols Outlined';
    position: absolute;
    inset: 0;
    display: grid;
    place-items: center;
    font-size: 1.5rem;
    opacity: 0.5;
  }

  .hero-simple__property-info {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
  }

  .hero-simple__property-name {
    font-size: 0.75rem;
    font-weight: 600;
    color: #0a1f44;
    flex: 1;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .hero-simple__property-match {
    font-size: 0.7rem;
    font-weight: 600;
    color: #ff9f43;
    background: rgba(255, 159, 67, 0.12);
    padding: 0.2rem 0.5rem;
    border-radius: 9999px;
  }

  @keyframes hero-gradient {
    0%, 100% {
      transform: scale(1.1) rotate(0deg);
    }
    50% {
      transform: scale(1.2) rotate(3deg);
    }
  }

  @media (max-width: 1023px) {
    .hero-simple {
      padding: 3rem 0 2rem;
      min-height: auto;
    }

    /* Disable animated background on mobile */
    .hero-simple__background {
      animation: none;
      opacity: 0.5;
    }

    .hero-simple__container {
      padding: 0 1rem;
    }

    .hero-simple__content {
      gap: 1.5rem;
    }

    .hero-simple__headline {
      font-size: clamp(1.5rem, 5vw, 2rem);
      line-height: 1.25;
      margin-bottom: 0.65rem;
    }

    .hero-simple__tagline {
      font-size: 0.975rem;
      line-height: 1.5;
      margin-bottom: 0.85rem;
    }

    .hero-simple__subheadline {
      font-size: 1rem;
      line-height: 1.6;
    }

    .hero-simple__visual {
      order: -1;
      padding: 0.5rem;
    }

    /* Simplify kanban on mobile - remove animations */
    .hero-simple__kanban {
      grid-template-columns: 1fr;
      max-width: 100%;
      height: auto;
      min-height: 300px;
      padding: 1rem;
    }

    .hero-simple__kanban-stage {
      min-height: auto;
    }

    /* Hide extra cards on mobile to reduce clutter */
    .hero-simple__kanban-stage:nth-child(2),
    .hero-simple__kanban-stage:nth-child(3) {
      display: none;
    }

    /* Make remaining cards larger and clearer */
    .hero-simple__property-card {
      font-size: 0.9rem;
    }

    .hero-simple__property-name {
      font-size: 0.85rem;
    }

    /* Disable glow effect on mobile */
    .hero-simple__glow {
      display: none;
    }
  }

  @media (max-width: 640px) {
    .hero-simple {
      padding: 2rem 0 1.5rem;
    }


    .hero-simple__trust-grid {
      grid-template-columns: 1fr;
      gap: 0.5rem 0;
    }

    .hero-simple__trust-item {
      font-size: 0.95rem;
    }

    .hero-simple__trust-text {
      line-height: 1.5;
    }
  }
</style>
