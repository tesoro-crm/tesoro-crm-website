---
import Layout from '../../layouts/Layout.astro';
import ImageWithFallback from '../../components/blog/ImageWithFallback.astro';
import { getCollection } from 'astro:content';
import { getLocale, getLocalizedPath } from '../../i18n/utils';
import type { Language } from '../../types/blog';
import { getAuthor } from '../../utils/authors';

const posts = await getCollection('blog', ({ data }) => !data.meta.draft);
const locale: Language = (getLocale(Astro.currentLocale, Astro.url) as Language) || 'nl';

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => {
  const dateA = (a.data.meta as any).publishDate || (a.data.hero as any).publishDate;
  const dateB = (b.data.meta as any).publishDate || (b.data.hero as any).publishDate;
  return new Date(dateB).getTime() - new Date(dateA).getTime();
});

// Get featured posts
const featuredPosts = sortedPosts.filter(post => post.data.meta.featured);

// Get categories
const categories = [...new Set(posts.map(post => post.data.meta.category))];

// Category color mapping function
function getCategoryStyle(category: string) {
  const categoryKey = category.toLowerCase().replace(/\s+/g, '-');
  return {
    color: `var(--category-${categoryKey}, var(--tesoro-orange))`,
    backgroundColor: `var(--category-${categoryKey}-bg, #FFF4E6)`
  };
}

// Get current page from URL
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');
const postsPerPage = 9;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
const paginatedPosts = sortedPosts.slice(
  (currentPage - 1) * postsPerPage,
  currentPage * postsPerPage
);

// Localized texts
const pageTitle = locale === 'nl' ? 'Tesoro CRM Blog - Inzichten & Verhalen' : locale === 'es' ? 'Blog de Tesoro CRM - Perspectivas e Historias' : 'Tesoro CRM Blog - Insights & Stories';
const pageDescription = locale === 'nl' 
  ? 'Ontdek de laatste inzichten over CRM, vastgoedmarketing en bedrijfsgroei van Tesoro CRM experts.'
  : locale === 'es'
  ? 'Descubre las últimas perspectivas sobre CRM, marketing inmobiliario y crecimiento empresarial de los expertos de Tesoro CRM.'
  : 'Discover the latest insights on CRM, real estate marketing, and business growth from Tesoro CRM experts.';
const allPostsText = locale === 'nl' ? 'Alle Posts' : locale === 'es' ? 'Todas las Publicaciones' : 'All Posts';
const featuredText = locale === 'nl' ? 'Uitgelichte Artikelen' : locale === 'es' ? 'Artículos Destacados' : 'Featured Articles';
---

<Layout
  title={pageTitle}
  description={pageDescription}
>
  <section class="blog-index">
    <div class="blog-index__container">
      <header class="blog-index__header">
        <h1 class="blog-index__title">Tesoro CRM Blog</h1>
        <p class="blog-index__description">
          {pageDescription}
        </p>

        <!-- Category Filter -->
        <div class="blog-index__filters">
          <a href={getLocalizedPath('/blog', locale)} class={`blog-index__filter ${!Astro.url.searchParams.get('category') ? 'blog-index__filter--active' : ''}`}>
            {allPostsText}
          </a>
          {categories.map(category => (
            <a
              href={getLocalizedPath(`/blog?category=${encodeURIComponent(category)}`, locale)}
              class={`blog-index__filter ${Astro.url.searchParams.get('category') === category ? 'blog-index__filter--active' : ''}`}
            >
              {category}
            </a>
          ))}
        </div>
      </header>

      <!-- Featured Posts -->
      {featuredPosts.length > 0 && (
        <section class="blog-index__featured">
          <h2 class="blog-index__section-title">{featuredText}</h2>
          <div class="blog-index__featured-grid">
            {featuredPosts.slice(0, 3).map(post => {
              const postData = post.data;
              const title = postData.hero.title[locale];
              const description = postData.hero.description[locale];
              const heroImage = postData.hero.image;
              const publishDateString = (postData.meta as any).publishDate || (postData.hero as any).publishDate;
              const publishDate = new Date(publishDateString);
              const authorId = (postData.meta as any).authorId || (postData.meta as any).author?.id || 'maria-perez';
              const author = getAuthor(authorId);
              
              return (
                <article class="blog-index__featured-card">
                  <ImageWithFallback
                    src={heroImage.src}
                    alt={heroImage.alt[locale]}
                    width={heroImage.width || 800}
                    height={heroImage.height || 450}
                    loading="lazy"
                    class="blog-index__featured-image"
                    aspectRatio="16/9"
                    clickable={false}
                  />
                  <div class="blog-index__featured-content">
                    <div class="blog-index__featured-meta">
                      <span 
                        class="blog-index__featured-category" 
                        style={`background: ${getCategoryStyle(postData.meta.category).color}; color: white;`}
                      >
                        {postData.meta.category}
                      </span>
                      <time class="blog-index__featured-date" datetime={publishDateString}>
                        {publishDate.toLocaleDateString(locale === 'nl' ? 'nl-NL' : locale === 'es' ? 'es-ES' : 'en-US', {
                          month: 'short',
                          day: 'numeric'
                        })}
                      </time>
                  </div>
                  <h3 class="blog-index__featured-title">
                    <a href={getLocalizedPath(`/blog/${postData.meta.id}`, locale)}>{title}</a>
                  </h3>
                  <p class="blog-index__featured-description">{description}</p>
                  {author && (
                    <div class="blog-index__featured-author">
                      <ImageWithFallback
                        src={author.image}
                        alt={author.name}
                        width={40}
                        height={40}
                        loading="eager"
                        class="blog-index__featured-author-avatar"
                        aspectRatio="1/1"
                        clickable={false}
                      />
                      <span class="blog-index__featured-author-name">{author.name}</span>
                    </div>
                  )}
                </div>
              </article>
            );
            })}
          </div>
        </section>
      )}

      <!-- All Posts Grid -->
      <section class="blog-index__posts">
        <div class="blog-index__posts-header">
          <h2 class="blog-index__section-title">
            {Astro.url.searchParams.get('category')
              ? `${Astro.url.searchParams.get('category')} ${locale === 'nl' ? 'Artikelen' : locale === 'es' ? 'Artículos' : 'Articles'}`
              : locale === 'nl' ? 'Laatste Artikelen' : locale === 'es' ? 'Últimos Artículos' : 'Latest Articles'
            }
          </h2>
          <div class="blog-index__posts-count">
            {sortedPosts.length} {locale === 'nl' ? 'artikelen' : locale === 'es' ? 'artículos' : 'articles'}
          </div>
        </div>

        <div class="blog-index__grid">
          {paginatedPosts.map(post => {
            const postData = post.data;
            const title = postData.hero.title[locale];
            const description = postData.hero.description[locale];
            const heroImage = postData.hero.image;
            const publishDateString = (postData.meta as any).publishDate || (postData.hero as any).publishDate;
            const publishDate = new Date(publishDateString);
            const authorId = (postData.meta as any).authorId || (postData.meta as any).author?.id || 'maria-perez';
            const author = getAuthor(authorId);
            
            return (
              <article class="blog-index__card">
                <ImageWithFallback
                  src={heroImage.src}
                  alt={heroImage.alt[locale]}
                  width={heroImage.width || 800}
                  height={heroImage.height || 400}
                  loading="eager"
                  class="blog-index__featured-image"
                  aspectRatio="2/1"
                  clickable={false}
                />
              <div class="blog-index__card-content">
                <div class="blog-index__card-meta">
                  <span 
                    class="blog-index__card-category" 
                    style={`background: ${getCategoryStyle(postData.meta.category).backgroundColor}; color: ${getCategoryStyle(postData.meta.category).color}; border: 1px solid ${getCategoryStyle(postData.meta.category).color}20;`}
                  >
                    {postData.meta.category}
                  </span>
                  <time class="blog-index__card-date" datetime={publishDateString}>
                    {publishDate.toLocaleDateString(locale === 'nl' ? 'nl-NL' : locale === 'es' ? 'es-ES' : 'en-US', {
                      month: 'short',
                      day: 'numeric'
                    })}
                  </time>
                  {postData.meta.readingTime && (
                    <span class="blog-index__card-reading-time">{postData.meta.readingTime} min</span>
                  )}
                </div>
                <h3 class="blog-index__card-title">
                  <a href={getLocalizedPath(`/blog/${postData.meta.id}`, locale)}>{title}</a>
                </h3>
                <p class="blog-index__card-description">{description}</p>
                <div class="blog-index__card-footer">
                  {author && (
                    <div class="blog-index__card-author">
                      <ImageWithFallback
                        src={author.image}
                        alt={author.name}
                        width={32}
                        height={32}
                        loading="lazy"
                        class="blog-index__card-author-avatar"
                        aspectRatio="1/1"
                        clickable={false}
                      />
                      <span class="blog-index__card-author-name">{author.name}</span>
                    </div>
                  )}
                  <div class="blog-index__card-tags">
                    {postData.meta.tags.slice(0, 2).map((tag: string) => (
                      <span class="blog-index__card-tag">#{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </article>
            );
          })}
        </div>

        <!-- Pagination -->
        {totalPages > 1 && (
          <nav class="blog-index__pagination">
            {currentPage > 1 && (
              <a
                href={getLocalizedPath(`/blog?page=${currentPage - 1}${Astro.url.searchParams.get('category') ? `&category=${Astro.url.searchParams.get('category')}` : ''}`, locale)}
                class="blog-index__pagination-link blog-index__pagination-link--prev"
              >
                ← Previous
              </a>
            )}

            <div class="blog-index__pagination-numbers">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                <a
                  href={getLocalizedPath(`/blog?page=${page}${Astro.url.searchParams.get('category') ? `&category=${Astro.url.searchParams.get('category')}` : ''}`, locale)}
                  class={`blog-index__pagination-number ${page === currentPage ? 'blog-index__pagination-number--active' : ''}`}
                >
                  {page}
                </a>
              ))}
            </div>

            {currentPage < totalPages && (
              <a
                href={getLocalizedPath(`/blog?page=${currentPage + 1}${Astro.url.searchParams.get('category') ? `&category=${Astro.url.searchParams.get('category')}` : ''}`, locale)}
                class="blog-index__pagination-link blog-index__pagination-link--next"
              >
                Next →
              </a>
            )}
          </nav>
        )}
      </section>

      <!-- Newsletter Signup -->
      <section class="blog-index__newsletter">
        <div class="blog-index__newsletter-content">
          <h2 class="blog-index__newsletter-title">Stay in the loop</h2>
          <p class="blog-index__newsletter-description">
            Get the latest insights on CRM and real estate marketing delivered to your inbox.
          </p>
          <form class="blog-index__newsletter-form" data-newsletter-form>
            <input
              type="email"
              placeholder="Enter your email address"
              required
              class="blog-index__newsletter-input"
            />
            <button type="submit" class="blog-index__newsletter-submit">
              Subscribe
            </button>
          </form>
          <p class="blog-index__newsletter-privacy">
            We respect your privacy. Unsubscribe at any time.
          </p>
        </div>
      </section>
    </div>
  </section>
</Layout>

<script>
  // Newsletter signup
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector<HTMLFormElement>('[data-newsletter-form]');
    if (!form) return;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const emailInput = form.querySelector<HTMLInputElement>('input[type="email"]');
      if (!emailInput) return;
      const email = emailInput.value;

      try {
        const response = await fetch('/api/newsletter', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email }),
        });

        if (response.ok) {
          alert('Thanks for subscribing! Check your email for confirmation.');
          form.reset();
        } else {
          alert('Something went wrong. Please try again.');
        }
      } catch (error) {
        alert('Something went wrong. Please try again.');
      }
    });
  });
</script>

<style>
  .blog-index {
    min-height: 100vh;
    background: #f8fafc;
  }

  .blog-index__container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 4rem 1rem;
  }

  .blog-index__header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .blog-index__title {
    font-size: 3rem;
    font-weight: 800;
    color: #0f172a;
    margin-bottom: 1rem;
  }

  .blog-index__description {
    font-size: 1.25rem;
    color: #64748b;
    max-width: 600px;
    margin: 0 auto 2rem;
    line-height: 1.6;
  }

  .blog-index__filters {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.5rem;
  }

  .blog-index__filter {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    text-decoration: none;
    font-weight: 500;
    color: #64748b;
    transition: all 0.2s;
  }

  .blog-index__filter:hover {
    color: var(--accent-primary);
    background: #f1f5f9;
  }

  .blog-index__filter--active {
    background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
    color: white;
  }

  .blog-index__section-title {
    font-size: 2rem;
    font-weight: 700;
    color: #0f172a;
    margin-bottom: 2rem;
  }

  .blog-index__featured {
    margin-bottom: 4rem;
  }

  .blog-index__featured-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .blog-index__featured-card {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .blog-index__featured-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
  }

  .blog-index__featured-image {
    width: 100%;
    /* Height managed by aspect-ratio in ImageWithFallback */
  }

  .blog-index__featured-content {
    padding: 1.5rem;
  }

  .blog-index__featured-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }

  .blog-index__featured-category {
    /* Background and color now set inline via getCategoryStyle */
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.75rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .blog-index__featured-date {
    color: #6b7280;
  }

  .blog-index__featured-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #0f172a;
    margin-bottom: 0.75rem;
  }

  .blog-index__featured-title a {
    text-decoration: none;
    color: inherit;
  }

  .blog-index__featured-title a:hover {
    color: var(--accent-primary);
  }

  .blog-index__featured-description {
    color: #64748b;
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .blog-index__featured-author {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  /* Fix ImageWithFallback wrapper in author section */
  .blog-index__featured-author .image-with-fallback {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
  }

  .blog-index__featured-author-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }

  .blog-index__featured-author-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: #374151;
  }

  .blog-index__posts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .blog-index__posts-count {
    color: #6b7280;
    font-size: 0.875rem;
  }

  .blog-index__grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .blog-index__card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .blog-index__card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px -2px rgba(0, 0, 0, 0.1);
  }

  .blog-index__card-image {
    width: 100%;
    /* Height managed by aspect-ratio in ImageWithFallback */
  }

  .blog-index__card-content {
    padding: 1.5rem;
  }

  .blog-index__card-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }

  .blog-index__card-category {
    /* Background and color now set inline via getCategoryStyle */
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.2s ease;
  }
  
  .blog-index__card-category:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  .blog-index__card-date {
    color: #6b7280;
  }

  .blog-index__card-reading-time {
    color: #6b7280;
  }

  .blog-index__card-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #0f172a;
    margin-bottom: 0.75rem;
    line-height: 1.4;
  }

  .blog-index__card-title a {
    text-decoration: none;
    color: inherit;
  }

  .blog-index__card-title a:hover {
    color: var(--accent-primary);
  }

  .blog-index__card-description {
    color: #64748b;
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  .blog-index__card-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .blog-index__card-author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  /* Fix ImageWithFallback wrapper in card author section */
  .blog-index__card-author .image-with-fallback {
    flex-shrink: 0;
    width: 32px;
    height: 32px;
  }

  .blog-index__card-author-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
  }

  .blog-index__card-author-name {
    font-size: 0.75rem;
    font-weight: 500;
    color: #6b7280;
  }

  .blog-index__card-tags {
    display: flex;
    gap: 0.25rem;
  }

  .blog-index__card-tag {
    font-size: 0.75rem;
    color: #94a3b8;
  }

  .blog-index__pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
  }

  .blog-index__pagination-link {
    color: var(--accent-primary);
    text-decoration: none;
    font-weight: 500;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    transition: background-color 0.2s;
  }

  .blog-index__pagination-link:hover {
    background: #f1f5f9;
  }

  .blog-index__pagination-numbers {
    display: flex;
    gap: 0.5rem;
  }

  .blog-index__pagination-number {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 6px;
    text-decoration: none;
    color: #6b7280;
    font-weight: 500;
    transition: all 0.2s;
  }

  .blog-index__pagination-number:hover {
    background: #f1f5f9;
    color: var(--accent-primary);
  }

  .blog-index__pagination-number--active {
    background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
    color: white;
  }

  .blog-index__newsletter {
    background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
    border-radius: 16px;
    padding: 4rem 2rem;
    text-align: center;
    color: white;
  }

  .blog-index__newsletter-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .blog-index__newsletter-description {
    font-size: 1.125rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }

  .blog-index__newsletter-form {
    display: flex;
    gap: 1rem;
    max-width: 500px;
    margin: 0 auto 1rem;
  }

  .blog-index__newsletter-input {
    flex: 1;
    padding: 1rem;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
  }

  .blog-index__newsletter-submit {
    background: white;
    color: var(--accent-primary);
    border: none;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .blog-index__newsletter-submit:hover {
    background: #f8fafc;
    transform: translateY(-1px);
  }

  .blog-index__newsletter-privacy {
    font-size: 0.875rem;
    opacity: 0.8;
  }

  @media (max-width: 768px) {
    .blog-index__container {
      padding: 2rem 1rem;
    }

    .blog-index__title {
      font-size: 2.5rem;
    }

    .blog-index__featured-grid,
    .blog-index__grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .blog-index__posts-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .blog-index__pagination {
      flex-direction: column;
      gap: 1rem;
    }

    .blog-index__pagination-numbers {
      order: -1;
    }

    .blog-index__newsletter-form {
      flex-direction: column;
    }

    .blog-index__newsletter-input,
    .blog-index__newsletter-submit {
      width: 100%;
    }
  }
</style>
