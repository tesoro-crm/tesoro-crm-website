---
import { Image } from 'astro:assets';
import Button from './ui/Button.astro';
import AISearch from './AISearch.astro';
import { getLocale, getLocalizedPath, loadTranslations, t } from '../i18n/utils';
import { languages, languageFlags } from '../i18n/config';
import type { Language } from '../i18n/config';
import logo from '../assets/tesoro-logo-full-color-rgb-1500px-w-300ppi.png';

const currentPath = Astro.url.pathname;
const locale: Language = getLocale(Astro.currentLocale, Astro.url);
await loadTranslations(locale);

// Get base path without language prefix
const basePath = currentPath.replace(/^\/(en|es|nl)/, '') || '/';
---

<header class="sticky top-0 z-[100] bg-white border-b border-neutral-200 shadow-sm">
  <nav class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a href="/" class="flex items-center hover:opacity-80 transition-opacity">
        <Image 
          src={logo} 
          alt="Tesoro CRM" 
          class="h-8 w-auto" 
          width={262}
          height={64}
          format="webp"
          quality={85}
          loading="eager"
          fetchpriority="high"
        />
      </a>

      <!-- Desktop Navigation -->
      <ul class="hidden md:flex items-center gap-8">
        <li>
          <a 
            href="/features" 
            class={`text-sm font-medium transition-colors ${currentPath === '/features' ? 'text-primary' : 'text-neutral-700 hover:text-primary'}`}
          >
            {t('nav.features', locale)}
          </a>
        </li>
        <li>
          <a 
            href="/pricing" 
            class={`text-sm font-medium transition-colors ${currentPath === '/pricing' ? 'text-primary' : 'text-neutral-700 hover:text-primary'}`}
          >
            {t('nav.pricing', locale)}
          </a>
        </li>
      </ul>

      <!-- AI Search, Language Selector & CTA -->
      <div class="hidden md:flex items-center gap-4">
        <AISearch locale={locale} />
        <div class="relative">
          <button 
            id="language-button"
            class="flex items-center gap-1 text-sm font-medium text-neutral-700 hover:text-primary transition-colors"
            aria-label="Select language"
          >
            <span>üåê</span>
            <span>{locale.toUpperCase()}</span>
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
            </svg>
          </button>
          <div 
            id="language-menu"
            class="hidden absolute right-0 mt-2 w-40 bg-white rounded-lg shadow-lg border border-neutral-200 py-1 z-50"
          >
            {Object.entries(languages).map(([lang, name]) => (
              <a 
                href={getLocalizedPath(basePath, lang as Language)} 
                class={`block px-4 py-2 text-sm hover:bg-neutral-50 ${locale === lang ? 'text-primary font-semibold' : 'text-neutral-700'}`}
              >
                {languageFlags[lang as Language]} {name}
              </a>
            ))}
          </div>
        </div>
        
        <Button variant="primary" size="sm" href="/signup">
          {t('nav.cta', locale)}
        </Button>
      </div>

      <!-- Mobile Menu Button -->
      <button 
        class="md:hidden p-2 text-neutral-700 hover:text-primary"
        aria-label="Menu"
        id="mobile-menu-button"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
      </button>
    </div>

    <!-- Mobile Menu -->
    <div class="hidden md:hidden pb-4" id="mobile-menu">
      <ul class="space-y-2">
        <li>
          <a href="/features" class="block py-2 text-neutral-700 hover:text-primary">
            {t('nav.features', locale)}
          </a>
        </li>
        <li>
          <a href="/pricing" class="block py-2 text-neutral-700 hover:text-primary">
            {t('nav.pricing', locale)}
          </a>
        </li>
        <li class="border-t border-neutral-200 pt-2 mt-2">
          <p class="text-xs text-neutral-700 mb-2 px-2">{t('nav.language', locale)}</p>
          {Object.entries(languages).map(([lang, name]) => (
            <a 
              href={getLocalizedPath(basePath, lang as Language)} 
              class={`block py-2 px-2 text-sm rounded ${locale === lang ? 'bg-primary/10 text-primary font-semibold' : 'text-neutral-700 hover:bg-neutral-50'}`}
            >
              {languageFlags[lang as Language]} {name}
            </a>
          ))}
        </li>
        <li class="pt-2">
          <Button variant="primary" size="sm" href="/signup" fullWidth>
            {t('nav.cta', locale)}
          </Button>
        </li>
      </ul>
    </div>
  </nav>
</header>

<script>
  function initHeader() {
    // Mobile menu toggle
    const mobileButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileButton && mobileMenu) {
      mobileButton.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
    }

    // Language selector toggle
    const languageButton = document.getElementById('language-button');
    const languageMenu = document.getElementById('language-menu');
    
    if (languageButton && languageMenu) {
      languageButton.addEventListener('click', (e) => {
        e.stopPropagation();
        languageMenu.classList.toggle('hidden');
      });

      // Close language menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (!languageButton.contains(target) && !languageMenu.contains(target)) {
          languageMenu.classList.add('hidden');
        }
      });

      // Language persistence - save preference when language link is clicked
      languageMenu.querySelectorAll('a').forEach((link) => {
        link.addEventListener('click', (e) => {
          const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
          if (href) {
            // Extract language from href (/, /en, /es)
            const lang = href.startsWith('/en') ? 'en' : href.startsWith('/es') ? 'es' : 'nl';
            // Save to cookie (expires in 1 year)
            document.cookie = `preferred-language=${lang}; path=/; max-age=31536000; SameSite=Lax`;
            // Also save to localStorage as backup
            localStorage.setItem('preferred-language', lang);
          }
        });
      });
    }
  }

  // Run on initial load
  initHeader();

  // Re-run after View Transitions
  document.addEventListener('astro:after-swap', initHeader);
</script>
