---
import Layout from '../layouts/Layout.astro';
import Input from '../components/ui/Input.astro';
import Button from '../components/ui/Button.astro';
import Badge from '../components/ui/Badge.astro';
import { getLocale, loadTranslations, t, getLocalizedPath } from '../i18n/utils';
import type { Language } from '../i18n/config';

const locale: Language = getLocale(Astro.currentLocale, Astro.url);
await loadTranslations(locale);
---

<Layout
  title={t('home.demo_page.meta_title', locale)}
  description={t('home.demo_page.meta_description', locale)}
>
  <!-- Hero Section -->
  <section class="py-12 lg:py-16 bg-gradient-to-br from-primary/5 via-secondary/5 to-white">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl">
      <div class="text-center">
        <Badge variant="primary" size="md" class="mb-4">
          {t('home.modals.demo.title', locale).replace('Schedule your free ', '').replace('Reserva tu ', '').replace('Plan je gratis ', '')}
        </Badge>
        <h1 class="text-4xl lg:text-5xl font-display font-bold text-neutral-900 mb-6">
          {t('home.modals.demo.title', locale)}
        </h1>
        <div class="max-w-2xl mx-auto">
          <div class="text-center px-6 py-4 bg-gradient-to-br from-amber-50 to-orange-50 rounded-xl border-2 border-amber-200">
            <p class="text-lg font-medium text-neutral-900 leading-relaxed">
              {t('home.modals.demo.description', locale)}
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Form Section -->
  <section class="py-8 lg:py-12 bg-white">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-3xl">
      <form id="demo-form" action="/api/demo" method="POST" class="space-y-6" novalidate>
        <!-- Your Challenge -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_challenge', locale)}</h2>
          <div class="space-y-2">
            <label for="painPoint" class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_pain_point', locale)} <span class="text-error">*</span>
            </label>
            <textarea
              name="painPoint"
              id="painPoint"
              rows="4"
              class="w-full px-4 py-3 rounded-xl border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
              placeholder={t('home.modals.demo.placeholder_pain_point', locale)}
              required
            ></textarea>
            <p class="text-sm text-neutral-500 italic">{t('home.modals.demo.pain_point_help', locale)}</p>
          </div>
        </div>

        <!-- Personal Information -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_personal', locale)}</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div class="space-y-2">
              <label class="block text-sm font-medium text-neutral-700">
                {t('home.modals.demo.label_first_name', locale)} <span class="text-error">*</span>
              </label>
              <Input
                name="firstName"
                placeholder={t('home.modals.demo.placeholder_first_name', locale)}
                required
              />
            </div>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-neutral-700">
                {t('home.modals.demo.label_last_name', locale)} <span class="text-error">*</span>
              </label>
              <Input
                name="lastName"
                placeholder={t('home.modals.demo.placeholder_last_name', locale)}
                required
              />
            </div>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_email', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="email"
              name="email"
              placeholder={t('home.modals.demo.placeholder_email', locale)}
              required
            />
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_phone', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="tel"
              name="phone"
              placeholder={t('home.modals.demo.placeholder_phone', locale)}
              required
            />
          </div>
        </div>

        <!-- Company Information -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_company', locale)}</h2>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_company', locale)} <span class="text-error">*</span>
            </label>
            <Input
              name="company"
              placeholder={t('home.modals.demo.placeholder_company', locale)}
              required
            />
          </div>
        </div>

        <!-- Scheduling -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_schedule', locale)}</h2>

          <!-- Date Selection -->
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_date', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="date"
              name="preferredDate"
              id="preferredDate"
              required
            />
          </div>

          <!-- Time Slots (loaded dynamically) -->
          <div id="time-slots-container" class="space-y-2" style="display: none;">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_time', locale)} <span class="text-error">*</span>
            </label>
            <div id="time-slots-loading" class="text-center py-6" style="display: none;">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
              <p class="text-sm text-neutral-500 mt-2">Beschikbare tijdslots laden...</p>
            </div>
            <div id="time-slots-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3"></div>
            <input type="hidden" name="preferredTime" id="selectedTimeSlot" required />
            <p id="time-slots-error" class="text-sm text-error mt-2" style="display: none;"></p>
          </div>
        </div>

        <!-- Notes Section -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <div class="space-y-2">
            <label for="notes" class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_notes', locale)}
            </label>
            <textarea
              name="notes"
              id="notes"
              rows="3"
              class="w-full px-4 py-3 rounded-xl border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
              placeholder={t('home.modals.demo.placeholder_notes', locale)}
            ></textarea>
          </div>
        </div>

        <!-- Privacy -->
        <div class="flex items-start gap-3 p-4 bg-neutral-50 rounded-xl border border-neutral-200">
          <input
            type="checkbox"
            name="privacy"
            id="privacy"
            class="mt-0.5 w-4 h-4 text-primary border-neutral-300 rounded focus:ring-primary"
            required
          />
          <label for="privacy" class="text-sm text-neutral-600">
            {t('home.modals.demo.privacy_text', locale)} <a href={getLocalizedPath('/privacy', locale)} class="text-primary hover:underline font-medium">{t('home.modals.demo.privacy_link', locale)}</a> {t('home.modals.demo.privacy_text_end', locale)}
          </label>
        </div>

        <!-- Cloudflare Turnstile -->
        <div class="cf-turnstile" data-sitekey={import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || "0x4AAAAAAB543ddl4o3MhkKO"}></div>

        <!-- Trust indicators and Submit button -->
        <div class="bg-gradient-to-br from-neutral-50 to-neutral-100 rounded-xl border border-neutral-200 p-6">
          <div class="text-center mb-4">
            <div class="flex items-center justify-center gap-6 text-sm text-neutral-600 flex-wrap">
              <span class="flex items-center gap-2">
                <span class="icon text-primary">schedule</span>
                {t('home.modals.demo.trust_1', locale)}
              </span>
              <span class="flex items-center gap-2">
                <span class="icon text-primary">verified</span>
                {t('home.modals.demo.trust_2', locale)}
              </span>
              <span class="flex items-center gap-2">
                <span class="icon text-primary">person</span>
                {t('home.modals.demo.trust_3', locale)}
              </span>
            </div>
          </div>
          <Button variant="primary" size="lg" type="submit" fullWidth id="submit-btn">
            <span class="icon">send</span>
            {t('home.modals.demo.submit', locale)}
          </Button>
        </div>
      </form>
    </div>
  </section>
</Layout>

<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
<script>
  // Stale-while-revalidate cache for time slots
  const slotsCache = new Map<string, any[]>();

  // Import the same logic as DemoModal
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('demo-form') as HTMLFormElement;
    const dateInput = document.getElementById('preferredDate') as HTMLInputElement;
    const timeSlotsContainer = document.getElementById('time-slots-container');
    const timeSlotsLoading = document.getElementById('time-slots-loading');
    const timeSlotsGrid = document.getElementById('time-slots-grid');
    const timeSlotsError = document.getElementById('time-slots-error');
    const selectedTimeSlotInput = document.getElementById('selectedTimeSlot') as HTMLInputElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;

    // Set minimum date to today
    const today = new Date();
    const minDate = today.toISOString().split('T')[0];
    if (dateInput) {
      dateInput.setAttribute('min', minDate);
    }

    /**
     * Render time slot buttons
     * @param slots - Array of time slots from Zoho
     * @param isStale - If true, slots are from cache and may be outdated
     */
    function renderTimeSlots(slots: any[], isStale = false) {
      if (!timeSlotsGrid) return;

      timeSlotsGrid.innerHTML = '';

      if (slots.length === 0) {
        if (timeSlotsError) {
          timeSlotsError.textContent = 'Geen beschikbare tijdslots voor deze datum.';
          timeSlotsError.style.display = 'block';
        }
        return;
      }

      slots.forEach((slot: any) => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'time-slot-btn px-4 py-3 text-sm font-medium border-2 border-neutral-300 rounded-lg hover:border-primary hover:bg-primary/5 transition-all duration-200';
        button.textContent = slot.from_time || slot.start_time;
        button.dataset.time = slot.from_time || slot.start_time;

        // If showing stale data, add visual indicator
        if (isStale) {
          button.classList.add('opacity-75');
          button.disabled = true; // Temporarily disabled while revalidating
        }

        button.addEventListener('click', () => {
          if (button.disabled) return;

          // Remove active class from all buttons
          timeSlotsGrid.querySelectorAll('.time-slot-btn').forEach(btn => {
            btn.classList.remove('border-primary', 'bg-primary/10', 'text-primary');
            btn.classList.add('border-neutral-300');
          });

          // Add active class to clicked button
          button.classList.remove('border-neutral-300');
          button.classList.add('border-primary', 'bg-primary/10', 'text-primary');

          // Set hidden input value
          if (selectedTimeSlotInput) {
            selectedTimeSlotInput.value = button.dataset.time || '';
          }
        });

        timeSlotsGrid.appendChild(button);
      });
    }

    /**
     * Update existing slots with fresh data
     * Grays out unavailable slots instead of removing them
     */
    function updateSlotsWithFreshData(freshSlots: any[]) {
      if (!timeSlotsGrid) return;

      const availableTimes = new Set(freshSlots.map(slot => slot.from_time || slot.start_time));
      const allButtons = timeSlotsGrid.querySelectorAll('.time-slot-btn') as NodeListOf<HTMLButtonElement>;

      allButtons.forEach(button => {
        const timeValue = button.dataset.time;

        if (availableTimes.has(timeValue)) {
          // Slot is available - enable it
          button.disabled = false;
          button.classList.remove('opacity-75', 'opacity-50', 'cursor-not-allowed');
          button.classList.add('hover:border-primary', 'hover:bg-primary/5');
        } else {
          // Slot is NOT available - gray it out
          button.disabled = true;
          button.classList.add('opacity-50', 'cursor-not-allowed', 'line-through');
          button.classList.remove('hover:border-primary', 'hover:bg-primary/5', 'border-primary', 'bg-primary/10', 'text-primary');
          button.classList.add('border-neutral-200', 'text-neutral-400');
        }
      });
    }

    // When date is selected, show cached slots immediately then revalidate
    dateInput?.addEventListener('change', async (e) => {
      const selectedDate = (e.target as HTMLInputElement).value;
      if (!selectedDate) return;

      // Show container
      if (timeSlotsContainer) timeSlotsContainer.style.display = 'block';
      if (timeSlotsError) timeSlotsError.style.display = 'none';
      if (selectedTimeSlotInput) selectedTimeSlotInput.value = '';

      // Check if we have cached slots for this date
      const cachedSlots = slotsCache.get(selectedDate);

      if (cachedSlots && cachedSlots.length > 0) {
        // INSTANT: Show cached slots immediately (stale)
        if (timeSlotsLoading) timeSlotsLoading.style.display = 'none';
        renderTimeSlots(cachedSlots, true); // isStale = true
      } else {
        // No cache: show loading state
        if (timeSlotsLoading) timeSlotsLoading.style.display = 'block';
        if (timeSlotsGrid) timeSlotsGrid.innerHTML = '';
      }

      // REVALIDATE: Fetch fresh data in background
      try {
        const response = await fetch(`/api/available-slots?date=${selectedDate}`);
        const data = await response.json();

        if (timeSlotsLoading) timeSlotsLoading.style.display = 'none';

        if (!response.ok || data.error) {
          throw new Error(data.error || 'Failed to fetch slots');
        }

        const freshSlots = data.slots || [];

        // Update cache
        slotsCache.set(selectedDate, freshSlots);

        if (cachedSlots && cachedSlots.length > 0) {
          // Had cached data: UPDATE existing UI by graying out unavailable slots
          updateSlotsWithFreshData(freshSlots);
        } else {
          // No cached data: RENDER fresh slots normally
          renderTimeSlots(freshSlots, false);
        }

      } catch (error) {
        console.error('Error fetching time slots:', error);
        if (timeSlotsLoading) timeSlotsLoading.style.display = 'none';

        // If we showed stale data and fetch failed, keep showing stale data
        if (!cachedSlots || cachedSlots.length === 0) {
          if (timeSlotsError) {
            timeSlotsError.textContent = 'Fout bij het laden van tijdslots. Probeer het opnieuw.';
            timeSlotsError.style.display = 'block';
          }
        }
      }
    });

    // Form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Disable submit button
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="icon animate-spin">sync</span> Verzenden...';
      }

      const formData = new FormData(form);

      try {
        const response = await fetch('/api/demo', {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Redirect to success page
          window.location.href = '/success?type=demo';
        } else {
          throw new Error(result.error || 'Something went wrong');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        alert('Er is een fout opgetreden. Probeer het opnieuw.');

        // Re-enable submit button
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<span class="icon">send</span> Verzenden';
        }
      }
    });
  });
</script>
