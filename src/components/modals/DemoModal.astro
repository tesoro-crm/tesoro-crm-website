---
import Modal from '../ui/Modal.astro';
import Input from '../ui/Input.astro';
import Button from '../ui/Button.astro';
import { t, getLocalizedPath } from '../../i18n/utils';
import type { Language } from '../../i18n/config';

export interface Props {
  locale: Language;
}

const { locale } = Astro.props;
---

<Modal id="demo-modal" title={t('home.modals.demo.title', locale)} size="xl">
  <!-- Scrollable content -->
  <div class="space-y-6">
    <!-- Header with description -->
    <div class="text-center px-6 py-5 bg-gradient-to-br from-amber-50 to-orange-50 rounded-lg border-2 border-amber-200">
      <p class="text-lg font-medium text-neutral-900 leading-relaxed">
        {t('home.modals.demo.description', locale)}
      </p>
    </div>

    <form id="demo-form" action="/api/demo" method="POST" class="space-y-6" novalidate>
      <!-- Your Challenge -->
      <div class="space-y-4">
        <h3 class="text-sm font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_challenge', locale)}</h3>
        <div class="space-y-2">
          <label for="painPoint" class="block text-sm font-medium text-neutral-700">
            {t('home.modals.demo.label_pain_point', locale)} <span class="text-error">*</span>
          </label>
          <textarea
            name="painPoint"
            id="painPoint"
            rows="4"
            class="w-full px-4 py-3 rounded-lg border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
            placeholder={t('home.modals.demo.placeholder_pain_point', locale)}
            required
          ></textarea>
          <p class="text-xs text-neutral-500 italic">{t('home.modals.demo.pain_point_help', locale)}</p>
        </div>
      </div>

      <!-- Personal Information -->
      <div class="space-y-4">
        <h3 class="text-sm font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_personal', locale)}</h3>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_first_name', locale)} <span class="text-error">*</span>
            </label>
            <Input
              name="firstName"
              placeholder={t('home.modals.demo.placeholder_first_name', locale)}
              required
            />
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_last_name', locale)} <span class="text-error">*</span>
            </label>
            <Input
              name="lastName"
              placeholder={t('home.modals.demo.placeholder_last_name', locale)}
              required
            />
          </div>
        </div>
        <div class="space-y-2">
          <label class="block text-sm font-medium text-neutral-700">
            {t('home.modals.demo.label_email', locale)} <span class="text-error">*</span>
          </label>
          <Input
            type="email"
            name="email"
            placeholder={t('home.modals.demo.placeholder_email', locale)}
            required
          />
        </div>
        <div class="space-y-2">
          <label class="block text-sm font-medium text-neutral-700">
            {t('home.modals.demo.label_phone', locale)} <span class="text-error">*</span>
          </label>
          <Input
            type="tel"
            name="phone"
            placeholder={t('home.modals.demo.placeholder_phone', locale)}
            required
          />
        </div>
      </div>

      <!-- Company Information -->
      <div class="space-y-4 pt-4 border-t border-neutral-200">
        <h3 class="text-sm font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_company', locale)}</h3>
        <div class="space-y-2">
          <label class="block text-sm font-medium text-neutral-700">
            {t('home.modals.demo.label_company', locale)} <span class="text-error">*</span>
          </label>
          <Input
            name="company"
            placeholder={t('home.modals.demo.placeholder_company', locale)}
            required
          />
        </div>
      </div>

      <!-- Scheduling -->
      <div class="space-y-4 pt-4 border-t border-neutral-200">
        <h3 class="text-sm font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_schedule', locale)}</h3>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_date', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="date"
              name="preferredDate"
              required
            />
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_time', locale)} <span class="text-error">*</span>
            </label>
            <select
              name="preferredTime"
              class="w-full px-4 py-3 rounded-lg border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 bg-white"
              required
            >
              <option value="">{t('home.modals.demo.time_select', locale)}</option>
              <option value="09:00 - 10:00">09:00 - 10:00</option>
              <option value="10:00 - 11:00">10:00 - 11:00</option>
              <option value="11:00 - 12:00">11:00 - 12:00</option>
              <option value="13:00 - 14:00">13:00 - 14:00</option>
              <option value="14:00 - 15:00">14:00 - 15:00</option>
              <option value="15:00 - 16:00">15:00 - 16:00</option>
              <option value="16:00 - 17:00">16:00 - 17:00</option>
            </select>
          </div>
        </div>

        <div class="space-y-2">
          <label for="notes" class="block text-sm font-medium text-neutral-700">
            {t('home.modals.demo.label_notes', locale)}
          </label>
          <textarea
            name="notes"
            id="notes"
            rows="3"
            class="w-full px-4 py-3 rounded-lg border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
            placeholder={t('home.modals.demo.placeholder_notes', locale)}
          ></textarea>
        </div>
      </div>

      <!-- Privacy -->
      <div class="flex items-start gap-3 p-4 bg-neutral-50 rounded-lg">
        <input
          type="checkbox"
          name="privacy"
          id="privacy"
          class="mt-1 w-4 h-4 text-primary border-neutral-300 rounded focus:ring-primary"
          required
        />
        <label for="privacy" class="text-sm text-neutral-600">
          {t('home.modals.demo.privacy_text', locale)} <a href={getLocalizedPath('/privacy', locale)} class="text-primary hover:underline font-medium">{t('home.modals.demo.privacy_link', locale)}</a> {t('home.modals.demo.privacy_text_end', locale)}
        </label>
      </div>

      <!-- Cloudflare Turnstile -->
      <div class="cf-turnstile" data-sitekey={import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || "0x4AAAAAAB543ddl4o3MhkKO"}></div>
    </form>
  </div>

  <!-- Sticky Footer with submit button -->
  <div slot="footer" class="modal-footer border-t border-neutral-200 px-6 py-4 bg-neutral-50 flex-shrink-0 rounded-b-lg">
    <!-- Trust indicators -->
    <div class="text-center mb-4">
      <div class="flex items-center justify-center gap-4 text-xs text-neutral-500 flex-wrap">
        <span class="flex items-center gap-1.5">
          <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 110-12 6 6 0 010 12z"/>
          </svg>
          {t('home.modals.demo.trust_1', locale)}
        </span>
        <span class="hidden sm:inline">•</span>
        <span class="flex items-center gap-1.5">
          <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 110-12 6 6 0 010 12z"/>
          </svg>
          {t('home.modals.demo.trust_2', locale)}
        </span>
        <span class="hidden sm:inline">•</span>
        <span class="flex items-center gap-1.5">
          <svg class="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 110-12 6 6 0 010 12z"/>
          </svg>
          {t('home.modals.demo.trust_3', locale)}
        </span>
      </div>
    </div>

    <!-- Submit Button -->
    <Button variant="primary" size="lg" type="submit" fullWidth form="demo-form">
      {t('home.modals.demo.submit', locale)}
    </Button>
  </div>
</Modal>

<script>
  // Handle form validation and async submission
  function initDemoFormValidation() {
    const form = document.getElementById('demo-form') as HTMLFormElement;
    if (!form) return;

    form.addEventListener('submit', async function(e) {
      e.preventDefault(); // Always prevent default form submission

      // Let browser do native validation first
      if (!form.checkValidity()) {
        // Find first invalid field
        const firstInvalid = form.querySelector(':invalid') as HTMLElement;
        if (firstInvalid) {
          // Scroll the modal body to the invalid field
          const modalBody = firstInvalid.closest('.modal-body');
          if (modalBody) {
            const fieldTop = firstInvalid.getBoundingClientRect().top;
            const modalBodyTop = modalBody.getBoundingClientRect().top;
            const scrollOffset = fieldTop - modalBodyTop - 20; // 20px extra margin

            modalBody.scrollBy({
              top: scrollOffset,
              behavior: 'smooth'
            });
          }

          // Focus the field after scroll
          setTimeout(() => {
            firstInvalid.focus();
          }, 300);
        }

        // Show native validation messages
        form.reportValidity();
        return;
      }

      // Form is valid, submit via fetch
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalButtonText = submitButton?.textContent || '';

      try {
        // Disable submit button
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Verzenden...';
        }

        // Submit form data
        const formData = new FormData(form);
        const response = await fetch('/api/demo', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Success! Close modal and show success message
          const modal = document.getElementById('demo-modal');
          if (modal) {
            modal.classList.add('hidden');
            document.body.style.overflow = '';
          }

          // Show success notification
          alert('✅ Bedankt! Je aanvraag is ontvangen. We nemen binnen 24 uur contact met je op.');

          // Reset form
          form.reset();
        } else {
          // Show error message
          alert('❌ ' + (result.error || 'Er is iets misgegaan. Probeer het later opnieuw.'));
        }
      } catch (error) {
        console.error('Form submission error:', error);
        alert('❌ Er is iets misgegaan. Probeer het later opnieuw.');
      } finally {
        // Re-enable submit button
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
        }
      }
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDemoFormValidation);
  } else {
    initDemoFormValidation();
  }

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:page-load', initDemoFormValidation);
</script>
