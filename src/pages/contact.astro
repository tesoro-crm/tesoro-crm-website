---
import Layout from '../layouts/Layout.astro';
import Button from '../components/ui/Button.astro';
import Card from '../components/ui/Card.astro';
import Input from '../components/ui/Input.astro';
import Badge from '../components/ui/Badge.astro';
import { getLocale, loadTranslations, t, getLocalizedPath } from '../i18n/utils';
import type { Language } from '../i18n/config';

const locale: Language = getLocale(Astro.currentLocale, Astro.url);
await loadTranslations(locale);

const contactMethods = [
  {
    icon: 'mail',
    title: t('contact.method_email_title', locale),
    description: 'sales@tesoro.estate',
    action: 'mailto:sales@tesoro.estate'
  },
  {
    icon: 'chat',
    title: t('contact.method_whatsapp_title', locale),
    description: '+31 6 1234 5678',
    action: 'https://wa.me/31612345678'
  },
  {
    icon: 'phone',
    title: t('contact.method_phone_title', locale),
    description: '+31 20 123 4567',
    action: 'tel:+31201234567'
  }
];
---

<Layout
  title={t('contact.meta_title', locale)}
  description={t('contact.meta_description', locale)}
>
  <section class="py-16 lg:py-24 bg-white">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-6xl">
      <div class="text-center mb-16">
        <Badge variant="primary" size="md" class="mb-4">
          {t('contact.hero_badge', locale)}
        </Badge>
        <h1 class="text-4xl lg:text-5xl font-display font-bold text-neutral-900 mb-6">
          {t('contact.hero_title', locale)}
        </h1>
        <p class="text-lg text-neutral-600 max-w-2xl mx-auto">
          {t('contact.hero_description', locale)}
        </p>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-[1.5fr_1fr] gap-12">
        <!-- Contact Form -->
        <Card variant="default" padding="lg">
          <h2 class="text-2xl font-display font-bold text-neutral-900 mb-6">
            {t('contact.form_title', locale)}
          </h2>

          <form
            action="/api/contact"
            method="POST"
            class="space-y-6"
            data-locale={locale}
            data-submitting-text={t('contact.submitting', locale)}
          >
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <Input
                name="firstName"
                label={t('contact.label_first_name', locale)}
                placeholder={t('contact.placeholder_first_name', locale)}
                required
              />
              <Input
                name="lastName"
                label={t('contact.label_last_name', locale)}
                placeholder={t('contact.placeholder_last_name', locale)}
                required
              />
            </div>

            <Input
              type="email"
              name="email"
              label={t('contact.label_email', locale)}
              placeholder={t('contact.placeholder_email', locale)}
              required
            />

            <Input
              type="tel"
              name="phone"
              label={t('contact.label_phone', locale)}
              placeholder={t('contact.placeholder_phone', locale)}
            />

            <div>
              <label class="block text-sm font-medium text-neutral-700 mb-2">
                {t('contact.label_subject', locale)}
              </label>
              <select
                name="subject"
                class="w-full px-4 py-3 rounded-lg border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200"
                required
              >
                <option value="">{t('contact.subject_select', locale)}</option>
                <option value="demo">{t('contact.subject_demo', locale)}</option>
                <option value="pricing">{t('contact.subject_pricing', locale)}</option>
                <option value="support">{t('contact.subject_support', locale)}</option>
                <option value="partnership">{t('contact.subject_partnership', locale)}</option>
                <option value="other">{t('contact.subject_other', locale)}</option>
              </select>
            </div>

            <div>
              <label for="message" class="block text-sm font-medium text-neutral-700 mb-2">
                {t('contact.label_message', locale)} <span class="text-error">*</span>
              </label>
              <textarea
                name="message"
                id="message"
                rows="5"
                class="w-full px-4 py-3 rounded-lg border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
                placeholder={t('contact.placeholder_message', locale)}
                required
              ></textarea>
            </div>

            <div class="flex items-start gap-3">
              <input
                type="checkbox"
                name="privacy"
                id="privacy"
                class="mt-1"
                required
              />
              <label for="privacy" class="text-sm text-neutral-600">
                {t('contact.privacy_text', locale)} <a href={getLocalizedPath('/privacy', locale)} class="text-primary hover:underline">{t('contact.privacy_link', locale)}</a> {t('contact.privacy_text_end', locale)}
              </label>
            </div>

            <Button variant="primary" size="lg" type="submit" fullWidth>
              {t('contact.submit_button', locale)}
            </Button>
          </form>
        </Card>

        <!-- Contact Methods -->
        <div class="space-y-6">
          <Card variant="default" padding="lg">
            <h3 class="text-xl font-display font-bold text-neutral-900 mb-4">
              {t('contact.methods_title', locale)}
            </h3>
            <p class="text-neutral-600 mb-6">
              {t('contact.methods_description', locale)}
            </p>

            <div class="space-y-4">
              {contactMethods.map((method) => (
                <a
                  href={method.action}
                  class="flex items-center gap-4 p-4 rounded-lg border border-neutral-200 hover:border-primary hover:bg-primary/5 transition-all duration-200 group"
                >
                  <span class="icon icon-lg text-primary">{method.icon}</span>
                  <div>
                    <div class="font-semibold text-neutral-900 group-hover:text-primary">
                      {method.title}
                    </div>
                    <div class="text-sm text-neutral-600">
                      {method.description}
                    </div>
                  </div>
                  <span class="ml-auto icon text-primary opacity-0 group-hover:opacity-100 transition-opacity">arrow_forward</span>
                </a>
              ))}
            </div>
          </Card>

          <Card variant="elevated" padding="lg">
            <h4 class="font-semibold text-neutral-900 mb-2">
              {t('contact.response_title', locale)}
            </h4>
            <p class="text-sm text-neutral-600">
              {t('contact.response_description', locale)}
            </p>
          </Card>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Pre-select subject dropdown based on query parameter
    const params = new URLSearchParams(window.location.search);
    const subject = params.get('subject');

    if (subject) {
      const select = document.querySelector('select[name="subject"]') as HTMLSelectElement;
      if (select) {
        // Try to set the value directly
        select.value = subject;

        // If the value doesn't exist, try to find a matching option
        if (!select.value) {
          const options = select.querySelectorAll('option');
          options.forEach((option) => {
            if (option.value === subject) {
              select.value = subject;
            }
          });
        }
      }
    }

    // Handle form submission via JavaScript
    const contactForm = document.querySelector('form[action="/api/contact"]') as HTMLFormElement;

    if (contactForm) {
      contactForm.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(contactForm);
        const submitButton = contactForm.querySelector('button[type="submit"]') as HTMLButtonElement;
        const originalButtonText = submitButton.textContent || '';

        // Get locale and localized text from data attributes
        const locale = contactForm.dataset.locale || 'es';
        const submittingText = contactForm.dataset.submittingText || 'Sending...';

        // Add language to form data
        formData.append('language', locale);

        // Disable form during submission
        submitButton.disabled = true;
        submitButton.textContent = submittingText;
        submitButton.style.opacity = '0.6';

        try {
          // Use absolute URL to ensure it works from any page
          const apiUrl = `${window.location.origin}/api/contact`;

          const response = await fetch(apiUrl, {
            method: 'POST',
            body: formData
          });

          const data = await response.json();

          if (data.success) {
            // Show success message
            contactForm.reset();
            submitButton.textContent = data.message;
            submitButton.style.backgroundColor = '#10b981';

            // Reset after 3 seconds
            setTimeout(() => {
              submitButton.textContent = originalButtonText;
              submitButton.style.backgroundColor = '';
              submitButton.disabled = false;
              submitButton.style.opacity = '1';
            }, 3000);
          } else {
            // Show error message
            alert(data.error);
            submitButton.disabled = false;
            submitButton.textContent = originalButtonText;
            submitButton.style.opacity = '1';
          }
        } catch (error) {
          console.error('Contact form submission error:', error);
          // Generic error - this shouldn't happen in normal operation
          alert('Network error. Please try again.');
          submitButton.disabled = false;
          submitButton.textContent = originalButtonText;
          submitButton.style.opacity = '1';
        }
      });
    }
  });
</script>
