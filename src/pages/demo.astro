---
import Layout from '../layouts/Layout.astro';
import Input from '../components/ui/Input.astro';
import Button from '../components/ui/Button.astro';
import Badge from '../components/ui/Badge.astro';
import { getLocale, loadTranslations, t, getLocalizedPath } from '../i18n/utils';
import type { Language } from '../i18n/config';

const locale: Language = getLocale(Astro.currentLocale, Astro.url);
await loadTranslations(locale);
---

<Layout
  title={t('home.demo_page.meta_title', locale)}
  description={t('home.demo_page.meta_description', locale)}
>
  <!-- Hero Section -->
  <section class="py-12 lg:py-16 bg-gradient-to-br from-primary/5 via-secondary/5 to-white">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-4xl">
      <div class="text-center">
        <Badge variant="primary" size="md" class="mb-4">
          {t('home.modals.demo.title', locale).replace('Schedule your free ', '').replace('Reserva tu ', '').replace('Plan je gratis ', '')}
        </Badge>
        <h1 class="text-4xl lg:text-5xl font-display font-bold text-neutral-900 mb-6">
          {t('home.modals.demo.title', locale)}
        </h1>
        <div class="max-w-2xl mx-auto">
          <div class="text-center px-6 py-4 bg-gradient-to-br from-amber-50 to-orange-50 rounded-xl border-2 border-amber-200">
            <p class="text-lg font-medium text-neutral-900 leading-relaxed">
              {t('home.modals.demo.description', locale)}
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Form Section -->
  <section class="py-8 lg:py-12 bg-white">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 max-w-3xl">
      <form id="demo-form" action="/api/demo" method="POST" class="space-y-6" novalidate>
        <!-- Your Challenge -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_challenge', locale)}</h2>
          <div class="space-y-2">
            <label for="painPoint" class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_pain_point', locale)} <span class="text-error">*</span>
            </label>
            <textarea
              name="painPoint"
              id="painPoint"
              rows="4"
              class="w-full px-4 py-3 rounded-xl border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
              placeholder={t('home.modals.demo.placeholder_pain_point', locale)}
              required
            ></textarea>
            <p class="text-sm text-neutral-500 italic">{t('home.modals.demo.pain_point_help', locale)}</p>
          </div>
        </div>

        <!-- Personal Information -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_personal', locale)}</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div class="space-y-2">
              <label class="block text-sm font-medium text-neutral-700">
                {t('home.modals.demo.label_first_name', locale)} <span class="text-error">*</span>
              </label>
              <Input
                name="firstName"
                placeholder={t('home.modals.demo.placeholder_first_name', locale)}
                required
              />
            </div>
            <div class="space-y-2">
              <label class="block text-sm font-medium text-neutral-700">
                {t('home.modals.demo.label_last_name', locale)} <span class="text-error">*</span>
              </label>
              <Input
                name="lastName"
                placeholder={t('home.modals.demo.placeholder_last_name', locale)}
                required
              />
            </div>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_email', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="email"
              name="email"
              placeholder={t('home.modals.demo.placeholder_email', locale)}
              required
            />
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_phone', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="tel"
              name="phone"
              placeholder={t('home.modals.demo.placeholder_phone', locale)}
              required
            />
          </div>
        </div>

        <!-- Company Information -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_company', locale)}</h2>
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_company', locale)} <span class="text-error">*</span>
            </label>
            <Input
              name="company"
              placeholder={t('home.modals.demo.placeholder_company', locale)}
              required
            />
          </div>
        </div>

        <!-- Scheduling -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <h2 class="text-lg font-semibold text-neutral-900 uppercase tracking-wide">{t('home.modals.demo.section_schedule', locale)}</h2>

          <!-- Date Selection -->
          <div class="space-y-2">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_date', locale)} <span class="text-error">*</span>
            </label>
            <Input
              type="date"
              name="preferredDate"
              id="preferredDate"
              required
            />
          </div>

          <!-- Time Slots (loaded dynamically) -->
          <div id="time-slots-container" class="space-y-2" style="display: none;">
            <label class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_time', locale)} <span class="text-error">*</span>
            </label>
            <div id="time-slots-loading" class="text-center py-6" style="display: none;">
              <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
              <p class="text-sm text-neutral-500 mt-2">Beschikbare tijdslots laden...</p>
            </div>
            <div id="time-slots-grid" class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3"></div>
            <input type="hidden" name="preferredTime" id="selectedTimeSlot" required />
            <p id="time-slots-error" class="text-sm text-error mt-2" style="display: none;"></p>
          </div>
        </div>

        <!-- Notes Section -->
        <div class="space-y-4 p-6 bg-neutral-50 rounded-xl border border-neutral-200">
          <div class="space-y-2">
            <label for="notes" class="block text-sm font-medium text-neutral-700">
              {t('home.modals.demo.label_notes', locale)}
            </label>
            <textarea
              name="notes"
              id="notes"
              rows="3"
              class="w-full px-4 py-3 rounded-xl border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
              placeholder={t('home.modals.demo.placeholder_notes', locale)}
            ></textarea>
          </div>
        </div>

        <!-- Privacy -->
        <div class="flex items-start gap-3 p-4 bg-neutral-50 rounded-xl border border-neutral-200">
          <input
            type="checkbox"
            name="privacy"
            id="privacy"
            class="mt-0.5 w-4 h-4 text-primary border-neutral-300 rounded focus:ring-primary"
            required
          />
          <label for="privacy" class="text-sm text-neutral-600">
            {t('home.modals.demo.privacy_text', locale)} <a href={getLocalizedPath('/privacy', locale)} class="text-primary hover:underline font-medium">{t('home.modals.demo.privacy_link', locale)}</a> {t('home.modals.demo.privacy_text_end', locale)}
          </label>
        </div>

        <!-- Cloudflare Turnstile -->
        <div class="cf-turnstile" data-sitekey={import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || "0x4AAAAAAB543ddl4o3MhkKO"}></div>

        <!-- Trust indicators and Submit button -->
        <div class="bg-gradient-to-br from-neutral-50 to-neutral-100 rounded-xl border border-neutral-200 p-6">
          <div class="text-center mb-4">
            <div class="flex items-center justify-center gap-6 text-sm text-neutral-600 flex-wrap">
              <span class="flex items-center gap-2">
                <span class="icon text-primary">schedule</span>
                {t('home.modals.demo.trust_1', locale)}
              </span>
              <span class="flex items-center gap-2">
                <span class="icon text-primary">verified</span>
                {t('home.modals.demo.trust_2', locale)}
              </span>
              <span class="flex items-center gap-2">
                <span class="icon text-primary">person</span>
                {t('home.modals.demo.trust_3', locale)}
              </span>
            </div>
          </div>
          <Button variant="primary" size="lg" type="submit" fullWidth id="submit-btn">
            <span class="icon">send</span>
            {t('home.modals.demo.submit', locale)}
          </Button>
        </div>
      </form>
    </div>
  </section>

  <!-- Success Modal -->
  <div id="success-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4" style="display: none;">
    <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-8 relative animate-fade-in">
      <!-- Success Icon -->
      <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <span class="icon text-4xl text-green-600">check_circle</span>
      </div>

      <!-- Success Message -->
      <h3 class="text-2xl font-bold text-center text-neutral-900 mb-2">
        ¡Solicitud recibida!
      </h3>
      <p class="text-center text-neutral-600 mb-6">
        Gracias por tu interés en Tesoro CRM. Hemos recibido tu solicitud de demo y nos pondremos en contacto contigo dentro de 24 horas para confirmar la cita.
      </p>

      <!-- Booking Details (if available) -->
      <div id="booking-details" class="bg-primary/5 rounded-xl p-4 mb-6" style="display: none;">
        <p class="text-sm font-medium text-neutral-700 mb-2">
          <span class="icon text-primary text-sm">event</span>
          Cita programada
        </p>
        <p id="booking-info" class="text-sm text-neutral-600"></p>
      </div>

      <!-- Check Email Message -->
      <div class="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6">
        <p class="text-sm text-blue-900">
          <span class="icon text-blue-600 text-sm">mail</span>
          Revisa tu email para la confirmación de tu solicitud.
        </p>
      </div>

      <!-- Close Button -->
      <button
        id="close-modal"
        type="button"
        class="w-full px-6 py-3 bg-primary hover:bg-primary-dark text-white font-semibold rounded-xl transition-all duration-200"
      >
        Cerrar
      </button>
    </div>
  </div>
</Layout>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .animate-fade-in {
    animation: fade-in 0.3s ease-out;
  }
</style>

<script src="https://challenges.cloudflare.com/turnstile/v0/api.js" async defer></script>
<script>
  // Stale-while-revalidate cache for time slots
  const slotsCache = new Map<string, any[]>();

  // Import the same logic as DemoModal
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('demo-form') as HTMLFormElement;
    const dateInput = document.getElementById('preferredDate') as HTMLInputElement;
    const timeSlotsContainer = document.getElementById('time-slots-container');
    const timeSlotsLoading = document.getElementById('time-slots-loading');
    const timeSlotsGrid = document.getElementById('time-slots-grid');
    const timeSlotsError = document.getElementById('time-slots-error');
    const selectedTimeSlotInput = document.getElementById('selectedTimeSlot') as HTMLInputElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;

    // Set minimum date to today
    const today = new Date();
    const minDate = today.toISOString().split('T')[0];
    if (dateInput) {
      dateInput.setAttribute('min', minDate);
    }

    /**
     * Convert 12-hour time format (with AM/PM) to 24-hour format
     * Example: "10:30 AM" -> "10:30", "02:00 PM" -> "14:00", "12:00 PM" -> "12:00"
     */
    function convert12to24(time12h: string): string {
      const [time, modifier] = time12h.split(' ');
      let [hours, minutes] = time.split(':');
      let hour = parseInt(hours, 10);

      if (modifier === 'AM') {
        // 12:00 AM is midnight (00:00)
        if (hour === 12) {
          hour = 0;
        }
      } else if (modifier === 'PM') {
        // 12:00 PM is noon (12:00), 1:00 PM is 13:00, etc.
        if (hour !== 12) {
          hour += 12;
        }
      }

      return `${hour.toString().padStart(2, '0')}:${minutes}`;
    }

    /**
     * Generate all possible time slots (9:00 - 17:00, 4 per hour = 32 slots)
     */
    function generateAllTimeSlots(): string[] {
      const slots: string[] = [];
      for (let hour = 9; hour < 17; hour++) {
        for (let minute = 0; minute < 60; minute += 15) {
          const timeStr = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
          slots.push(timeStr);
        }
      }
      return slots;
    }

    /**
     * Render all time slot buttons instantly
     * @param availableSlots - Optional array of available times from Zoho API
     */
    function renderAllTimeSlots(availableSlots?: string[]) {
      if (!timeSlotsGrid) return;

      timeSlotsGrid.innerHTML = '';
      const allSlots = generateAllTimeSlots();

      allSlots.forEach((timeStr) => {
        const button = document.createElement('button');
        button.type = 'button';
        button.className = 'time-slot-btn px-4 py-3 text-sm font-medium border-2 rounded-lg transition-all duration-200';
        button.textContent = timeStr;
        button.dataset.time = timeStr;

        // If we have Zoho data, mark unavailable slots
        if (availableSlots) {
          const isAvailable = availableSlots.includes(timeStr);
          if (isAvailable) {
            button.classList.add('border-neutral-300', 'hover:border-primary', 'hover:bg-primary/5');
          } else {
            button.classList.add('border-neutral-200', 'bg-neutral-50', 'text-neutral-400', 'cursor-not-allowed', 'opacity-50');
            button.disabled = true;
          }
        } else {
          // Loading state - all slots clickable but with loading indicator
          button.classList.add('border-neutral-300', 'hover:border-primary', 'hover:bg-primary/5', 'opacity-75');
        }

        button.addEventListener('click', () => {
          if (button.disabled) return;

          // Remove active class from all buttons
          timeSlotsGrid.querySelectorAll('.time-slot-btn').forEach(btn => {
            btn.classList.remove('border-primary', 'bg-primary/10', 'text-primary');
          });

          // Add active class to clicked button
          button.classList.remove('border-neutral-300');
          button.classList.add('border-primary', 'bg-primary/10', 'text-primary');

          // Set hidden input value
          if (selectedTimeSlotInput) {
            selectedTimeSlotInput.value = button.dataset.time || '';
          }
        });

        timeSlotsGrid.appendChild(button);
      });
    }

    // When date is selected, instantly show all possible slots then update with Zoho data
    dateInput?.addEventListener('change', async (e) => {
      const selectedDate = (e.target as HTMLInputElement).value;
      if (!selectedDate) return;

      // Show container and clear previous selection
      if (timeSlotsContainer) timeSlotsContainer.style.display = 'block';
      if (timeSlotsError) timeSlotsError.style.display = 'none';
      if (selectedTimeSlotInput) selectedTimeSlotInput.value = '';
      if (timeSlotsLoading) timeSlotsLoading.style.display = 'none';

      // INSTANT: Show all possible time slots immediately (9:00 - 17:00, 4 per hour)
      renderAllTimeSlots(); // No availableSlots = loading state with opacity

      // FETCH: Get availability from Zoho API in background
      try {
        const response = await fetch(`/api/available-slots?date=${selectedDate}`);
        const data = await response.json();

        if (!response.ok || data.error) {
          throw new Error(data.error || 'Failed to fetch slots');
        }

        // Handle case where Zoho returns "Slots Not Available" as a string instead of array
        const zohoSlots = Array.isArray(data.slots) ? data.slots : [];

        // Extract available time strings from Zoho response and convert to 24-hour format
        // Zoho returns times in 12-hour format (e.g., "10:30 AM", "02:00 PM")
        const availableTimes = zohoSlots.map((slot: any) => {
          // Slot can be a string ("10:30 AM") or an object with from_time/start_time property
          const timeStr = typeof slot === 'string' ? slot : (slot.from_time || slot.start_time);
          // Convert from 12-hour format (with AM/PM) to 24-hour format
          return convert12to24(timeStr);
        });

        // UPDATE: Re-render all slots with availability data
        renderAllTimeSlots(availableTimes);

        // Cache the available times for this date
        slotsCache.set(selectedDate, availableTimes);

      } catch (error) {
        console.error('Error fetching time slots:', error);

        // Check if we have cached data
        const cachedTimes = slotsCache.get(selectedDate);

        if (cachedTimes && cachedTimes.length > 0) {
          // Show cached data with a warning
          renderAllTimeSlots(cachedTimes);
          if (timeSlotsError) {
            timeSlotsError.textContent = 'Toont beschikbaarheid van eerder. Mogelijk niet actueel.';
            timeSlotsError.style.display = 'block';
          }
        } else {
          // No cached data and fetch failed - keep all slots enabled but show error
          if (timeSlotsError) {
            timeSlotsError.textContent = 'Kon beschikbaarheid niet laden. Alle tijden worden getoond.';
            timeSlotsError.style.display = 'block';
          }
        }
      }
    });

    // Form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Disable submit button
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="icon animate-spin">sync</span> Verzenden...';
      }

      const formData = new FormData(form);

      try {
        const response = await fetch('/api/demo', {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Show success modal instead of redirecting
          const modal = document.getElementById('success-modal');
          const bookingDetails = document.getElementById('booking-details');
          const bookingInfo = document.getElementById('booking-info');

          // Show booking details if Zoho booking was successful
          if (result.zohoBookingId && bookingDetails && bookingInfo) {
            const selectedDate = (dateInput as HTMLInputElement).value;
            const selectedTime = (selectedTimeSlotInput as HTMLInputElement).value;
            bookingInfo.textContent = `${selectedDate} a las ${selectedTime}`;
            bookingDetails.style.display = 'block';
          }

          // Show the modal
          if (modal) {
            modal.style.display = 'flex';

            // Reset form after showing modal
            form.reset();
            // Hide time slots container
            if (timeSlotsContainer) timeSlotsContainer.style.display = 'none';
            // Clear selected time slot
            if (selectedTimeSlotInput) selectedTimeSlotInput.value = '';
          }

          // Re-enable submit button
          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<span class="icon">send</span> Verzenden';
          }
        } else {
          throw new Error(result.error || 'Something went wrong');
        }
      } catch (error) {
        console.error('Form submission error:', error);
        alert('Er is een fout opgetreden. Probeer het opnieuw.');

        // Re-enable submit button
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<span class="icon">send</span> Verzenden';
        }
      }
    });
  });

  // Handle success modal close
  const closeModalBtn = document.getElementById('close-modal');
  const successModal = document.getElementById('success-modal');

  closeModalBtn?.addEventListener('click', () => {
    if (successModal) {
      successModal.style.display = 'none';
    }
  });

  // Also close modal when clicking outside
  successModal?.addEventListener('click', (e) => {
    if (e.target === successModal) {
      successModal.style.display = 'none';
    }
  });
</script>
