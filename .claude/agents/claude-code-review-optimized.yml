name: Tesoro CRM - Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
  # Skip reviews for draft PRs to save resources
  # Will trigger when marked as ready_for_review

jobs:
  claude-review:
    runs-on: ubuntu-latest
    # Skip for draft PRs and dependency updates
    if: github.event.pull_request.draft == false && !contains(github.event.pull_request.title, 'dependabot')
    
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need base commit for diff analysis

      - name: Analyze PR scope
        id: pr-scope
        run: |
          # Determine PR type based on changed files
          changed_files=$(git diff --name-only HEAD^ HEAD)
          
          docs_only=false
          content_only=false
          design_system_changes=false
          component_changes=false
          config_changes=false
          
          # Check if only documentation changed
          if echo "$changed_files" | grep -v -E '\.(md|txt)$' | wc -l | grep -q '^0$'; then
            docs_only=true
          fi
          
          # Check if only content (blog/KB) changed
          if echo "$changed_files" | grep -E '^src/content/' | wc -l | grep -q -v '^0$' && \
             echo "$changed_files" | grep -v -E '^src/content/|\.md$' | wc -l | grep -q '^0$'; then
            content_only=true
          fi
          
          # Check for design system changes
          if echo "$changed_files" | grep -E '(tailwind\.config|src/styles|src/components/ui/)' | wc -l | grep -q -v '^0$'; then
            design_system_changes=true
          fi
          
          # Check for component changes
          if echo "$changed_files" | grep -E 'src/components/' | wc -l | grep -q -v '^0$'; then
            component_changes=true
          fi
          
          # Check for config changes
          if echo "$changed_files" | grep -E '(astro\.config|package\.json|tsconfig|wrangler)' | wc -l | grep -q -v '^0$'; then
            config_changes=true
          fi
          
          echo "docs_only=$docs_only" >> $GITHUB_OUTPUT
          echo "content_only=$content_only" >> $GITHUB_OUTPUT
          echo "design_system_changes=$design_system_changes" >> $GITHUB_OUTPUT
          echo "component_changes=$component_changes" >> $GITHUB_OUTPUT
          echo "config_changes=$config_changes" >> $GITHUB_OUTPUT
          
          echo "Changed files analysis:"
          echo "- Documentation only: $docs_only"
          echo "- Content only: $content_only"
          echo "- Design system changes: $design_system_changes"
          echo "- Component changes: $component_changes"
          echo "- Configuration changes: $config_changes"

      - name: Run Tesoro CRM Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          track_progress: true
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}
            
            üè¢ **TESORO CRM CODE REVIEW**
            
            You are reviewing code for Tesoro CRM, a specialized real estate CRM system. 
            
            **PR SCOPE ANALYSIS:**
            - Documentation only: ${{ steps.pr-scope.outputs.docs_only }}
            - Content only: ${{ steps.pr-scope.outputs.content_only }}
            - Design system changes: ${{ steps.pr-scope.outputs.design_system_changes }}
            - Component changes: ${{ steps.pr-scope.outputs.component_changes }}
            - Configuration changes: ${{ steps.pr-scope.outputs.config_changes }}
            
            ## üéØ TESORO-SPECIFIC REVIEW FOCUS
            
            ### 1. **Architecture & Astro Best Practices**
            - ‚úÖ Proper Astro v5.14.1 component patterns
            - ‚úÖ TypeScript interfaces for all component props
            - ‚úÖ Correct use of Content Collections schema (src/content/config.ts)
            - ‚úÖ Static site generation optimization
            - ‚úÖ Performance implications (bundle size, loading)
            
            ### 2. **Design System Compliance** 
            - ‚úÖ Use of design tokens from `tailwind.config.ts`
            - ‚úÖ Consistent color usage: Primary Blue `#003366`, Secondary Gold `#F5B400`
            - ‚úÖ Typography: Poppins (headings), Inter (body), JetBrains Mono (code)
            - ‚úÖ Component variants following `docs/design-system/components.md`
            - ‚úÖ Spacing using 4px grid system
            - ‚úÖ Brand compliance per `docs/product/brand-identity.md`
            
            ### 3. **Multilingual Implementation (es/en/nl)**
            - ‚úÖ Proper localized text object structure: `{nl: "", en: "", es: ""}`
            - ‚úÖ Spanish as default locale with fallback routing
            - ‚úÖ Complete translations for all languages
            - ‚úÖ Consistent terminology across languages
            - ‚úÖ Cultural adaptation where needed
            
            ### 4. **Content Management (JSON-based)**
            - ‚úÖ Schema compliance for blog posts and knowledge base articles
            - ‚úÖ Proper meta data structure (author, category, tags, etc.)
            - ‚úÖ SEO optimization (titles, descriptions, keywords)
            - ‚úÖ Image optimization with alt text and captions
            - ‚úÖ Content guidelines adherence per `docs/content/`
            
            ### 5. **Product-Specific Logic**
            - ‚úÖ Real estate CRM context understanding
            - ‚úÖ Pricing accuracy (‚Ç¨99/month up to 10 users)
            - ‚úÖ Feature descriptions alignment with `docs/product/product-specs.md`
            - ‚úÖ Target audience focus (real estate agents)
            - ‚úÖ Value proposition consistency
            
            ### 6. **Performance & Accessibility**
            - ‚úÖ WCAG 2.1 AA compliance
            - ‚úÖ 4.5:1 contrast ratio for normal text
            - ‚úÖ Semantic HTML usage (nav, main, article, etc.)
            - ‚úÖ Mobile-first responsive design
            - ‚úÖ Image optimization (WebP, proper sizing)
            - ‚úÖ Core Web Vitals optimization
            
            ### 7. **Security & Privacy**
            - ‚úÖ No hardcoded secrets or API keys
            - ‚úÖ Proper environment variable usage
            - ‚úÖ GDPR/privacy compliance
            - ‚úÖ Content Security Policy adherence
            - ‚úÖ Input sanitization where applicable
            
            ## üìö REFERENCE DOCUMENTATION
            
            Use these docs as the source of truth:
            
            **Core Guidelines:**
            - Architecture & patterns: `CLAUDE.md`
            - Brand identity: `docs/product/brand-identity.md`
            - Product specifications: `docs/product/product-specs.md`
            - Design system: `docs/design-system/overview.md`
            
            **Specific Areas:**
            - Component library: `docs/design-system/components.md`
            - Typography system: `docs/design-system/typography.md`
            - Blog guidelines: `docs/content/blog/ai-guidelines.md`
            - Knowledge base: `docs/content/knowledge-base/ai-instructions.md`
            - Git workflow: `docs/workflow/git-strategy.md`
            - PR checklist: `docs/workflow/pr-checklist.md`
            
            ## üé® REVIEW INTENSITY BY TYPE
            
            **Documentation PRs**: Focus on accuracy, consistency with brand voice, internal linking
            **Content PRs**: Schema validation, SEO optimization, multilingual completeness
            **Component PRs**: Design system compliance, accessibility, TypeScript interfaces
            **Feature PRs**: Full comprehensive review across all areas
            **Configuration PRs**: Security implications, performance impact, deployment safety
            
            ## üí¨ FEEDBACK STYLE
            
            - **Be constructive and educational** - help the team learn Tesoro conventions
            - **Reference specific docs** - link to relevant guidelines when giving feedback  
            - **Prioritize issues** - distinguish between critical fixes and nice-to-haves
            - **Praise good practices** - recognize when code follows guidelines well
            - **Use inline comments** for specific code issues
            - **Use top-level comments** for general observations and praise
            
            ## üéØ SUCCESS CRITERIA
            
            A successful review ensures:
            ‚úÖ Code follows Tesoro CRM architecture patterns
            ‚úÖ Design system compliance maintained
            ‚úÖ Multilingual implementation correct
            ‚úÖ Content quality meets brand standards
            ‚úÖ Accessibility and performance optimized
            ‚úÖ Security best practices followed
            
            **Post your review using `gh pr comment` when complete.**
          
          claude_args: '--model claude-sonnet-4-20250514 --allowed-tools "mcp__github_inline_comment__create_inline_comment,Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*),Read,Grep,Glob"'