---
import { t, getLocale } from '../../i18n/utils';
import type { Language } from '../../i18n/config';

export interface Props {
  id: string;
  title: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  show?: boolean;
  locale?: Language;
}

const { id, title, size = 'md', show = false, locale = getLocale(Astro.currentLocale) } = Astro.props;

const sizeClasses = {
  sm: 'max-w-md',
  md: 'max-w-lg',
  lg: 'max-w-2xl',
  xl: 'max-w-4xl'
};
---

<div
  id={id}
  class={`modal fixed inset-0 z-[9999] overflow-y-auto ${show ? 'block' : 'hidden'}`}
  aria-labelledby={`${id}-title`}
  role="dialog"
  aria-modal="true"
>
  <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 sm:p-0">
    <!-- Background overlay -->
    <div
      class="modal-overlay fixed inset-0 bg-neutral-900 bg-opacity-75 transition-opacity"
      aria-hidden="true"
    ></div>

    <!-- Modal panel -->
    <div class={`modal-panel inline-block align-bottom bg-white rounded-xl text-left shadow-xl transform transition-all sm:my-8 sm:align-middle ${sizeClasses[size]} w-full flex flex-col`}>
      <!-- Header (sticky) -->
      <div class="modal-header flex items-center justify-between px-6 py-4 border-b border-neutral-200 flex-shrink-0">
        <h3 id={`${id}-title`} class="text-lg font-display font-semibold text-neutral-900">
          {title}
        </h3>
        <button
          type="button"
          class="modal-close text-neutral-400 hover:text-neutral-600 transition-colors"
          aria-label={t('components.modal.close', locale)}
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Content (scrollable) -->
      <div class="modal-body overflow-y-auto flex-1 px-6 py-4">
        <slot />
      </div>

      <!-- Footer (sticky) - optional slot for actions -->
      <slot name="footer" />
    </div>
  </div>
</div>

<style>
  .modal {
    animation: modal-fade-in 0.2s ease-out;
  }

  .modal-panel {
    animation: modal-slide-in 0.3s ease-out;
    /* Ensure modal fits in viewport with margin */
    max-height: calc(100vh - 4rem); /* 2rem top + 2rem bottom = 4rem total margin */
  }

  /* Mobile: even more constrained */
  @media (max-width: 640px) {
    .modal-panel {
      max-height: calc(100vh - 2rem); /* 1rem top + 1rem bottom on mobile */
    }
  }

  /* Desktop: comfortable margin */
  @media (min-width: 640px) {
    .modal-panel {
      max-height: calc(100vh - 6rem); /* 3rem top + 3rem bottom on desktop */
    }
  }

  .modal-body {
    /* Smooth scrolling */
    scroll-behavior: smooth;
  }

  /* Scrollbar styling for webkit browsers */
  .modal-body::-webkit-scrollbar {
    width: 8px;
  }

  .modal-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
  }

  .modal-body::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
  }

  .modal-body::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  @keyframes modal-fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes modal-slide-in {
    from {
      opacity: 0;
      transform: translate(0, -50px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translate(0, 0) scale(1);
    }
  }
</style>

<script>
  // Modal functionality
  function closeModal(modal: HTMLElement) {
    modal.classList.remove('block');
    modal.classList.add('hidden');
    document.body.style.overflow = 'auto';
    // Show header when modal is closed
    const header = document.querySelector('header');
    if (header) {
      (header as HTMLElement).style.display = '';
    }
  }

  function initModals() {
    // Remove existing listeners to prevent duplicates
    const existingTriggers = document.querySelectorAll('[data-modal-target][data-listener="true"]');
    existingTriggers.forEach(trigger => {
      trigger.removeAttribute('data-listener');
    });

    // Handle modal triggers
    document.querySelectorAll('[data-modal-target]').forEach(trigger => {
      // Skip if already has listener
      if (trigger.hasAttribute('data-listener')) return;
      trigger.setAttribute('data-listener', 'true');

      (trigger as HTMLElement).addEventListener('click', function(e) {
        e.preventDefault();
        const modalId = this.getAttribute('data-modal-target');
        const modal = document.getElementById(modalId!);
        if (modal) {
          modal.classList.remove('hidden');
          modal.classList.add('block');
          document.body.style.overflow = 'hidden';
          // Hide header when modal is open
          const header = document.querySelector('header');
          if (header) {
            header.style.display = 'none';
          }
        }
      });
    });

    // Handle modal close buttons
    document.querySelectorAll('.modal-close, [data-modal-close]').forEach(closeBtn => {
      (closeBtn as HTMLElement).addEventListener('click', function() {
        const modal = this.closest('.modal') as HTMLElement;
        if (modal) {
          closeModal(modal);
        }
      });
    });

    // Handle overlay clicks
    document.querySelectorAll('.modal-overlay').forEach(overlay => {
      (overlay as HTMLElement).addEventListener('click', function() {
        const modal = this.closest('.modal') as HTMLElement;
        if (modal) {
          closeModal(modal);
        }
      });
    });

    // Handle escape key (only attach once)
    if (!(window as any).modalEscapeListenerAttached) {
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          const openModal = document.querySelector('.modal.block') as HTMLElement;
          if (openModal) {
            closeModal(openModal);
          }
        }
      });
      (window as any).modalEscapeListenerAttached = true;
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initModals);
  } else {
    // DOM is already loaded
    initModals();
  }

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:page-load', initModals);

  // Global functions for programmatic modal control
  (window as any).openModal = function(modalId: string) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('block');
      document.body.style.overflow = 'hidden';
    }
  };

  (window as any).closeModal = function(modalId: string) {
    const modal = document.getElementById(modalId);
    if (modal) {
      closeModal(modal);
    }
  };
</script>
