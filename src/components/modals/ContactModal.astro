---
import Modal from '../ui/Modal.astro';
import Input from '../ui/Input.astro';
import Button from '../ui/Button.astro';
import { t } from '../../i18n/utils';
import type { Language } from '../../i18n/config';

export interface Props {
  locale: Language;
}

const { locale } = Astro.props;
---

<Modal id="contact-modal" title={t('home.modals.contact.title', locale)} size="lg">
  <!-- Scrollable content -->
  <div class="space-y-8">
    <!-- Header -->
    <div class="text-center">
      <p class="text-neutral-600">
        {t('home.modals.contact.description', locale)}
      </p>
    </div>

    <!-- Form -->
    <form id="contact-form" action="/api/contact" method="POST" class="space-y-6" novalidate>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div class="space-y-2">
          <label class="block text-sm font-medium text-neutral-700">
            {t('home.modals.contact.label_first_name', locale)} <span class="text-error">*</span>
          </label>
          <Input
            name="firstName"
            placeholder={t('home.modals.demo.placeholder_first_name', locale)}
            required
          />
        </div>
        <div class="space-y-2">
          <label class="block text-sm font-medium text-neutral-700">
            {t('home.modals.contact.label_last_name', locale)} <span class="text-error">*</span>
          </label>
          <Input
            name="lastName"
            placeholder={t('home.modals.demo.placeholder_last_name', locale)}
            required
          />
        </div>
      </div>

      <div class="space-y-2">
        <label class="block text-sm font-medium text-neutral-700">
          {t('home.modals.contact.label_email', locale)} <span class="text-error">*</span>
        </label>
        <Input
          type="email"
          name="email"
          placeholder={t('home.modals.demo.placeholder_email', locale)}
          required
        />
      </div>

      <div class="space-y-2">
        <label class="block text-sm font-medium text-neutral-700">
          {t('home.modals.contact.label_phone', locale)}
        </label>
        <Input
          type="tel"
          name="phone"
          placeholder={t('home.modals.demo.placeholder_phone', locale)}
        />
      </div>

      <div class="space-y-2">
        <label class="block text-sm font-medium text-neutral-700">
          {t('home.modals.contact.label_message', locale)} <span class="text-error">*</span>
        </label>
        <textarea
          name="message"
          rows="5"
          class="w-full px-4 py-3 rounded-lg border border-neutral-300 focus:border-primary focus:ring-2 focus:ring-primary transition-all duration-200 resize-none"
          placeholder={t('home.modals.contact.placeholder_message', locale)}
          required
        ></textarea>
      </div>

      <!-- Cloudflare Turnstile -->
      <div class="cf-turnstile" data-sitekey={import.meta.env.PUBLIC_TURNSTILE_SITE_KEY || "0x4AAAAAAB543ddl4o3MhkKO"}></div>
    </form>
  </div>

  <!-- Sticky Footer with submit button -->
  <div slot="footer" class="modal-footer border-t border-neutral-200 px-6 py-4 bg-neutral-50 flex-shrink-0 rounded-b-lg">
    <Button variant="primary" size="lg" type="submit" fullWidth form="contact-form">
      {t('home.modals.contact.submit', locale)}
    </Button>
  </div>
</Modal>

<script>
  // Handle form validation and scroll to first error
  function initContactFormValidation() {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    if (!form) return;

    form.addEventListener('submit', function(e) {
      // Let browser do native validation first
      if (!form.checkValidity()) {
        e.preventDefault();

        // Find first invalid field
        const firstInvalid = form.querySelector(':invalid') as HTMLElement;
        if (firstInvalid) {
          // Scroll the modal body to the invalid field
          const modalBody = firstInvalid.closest('.modal-body');
          if (modalBody) {
            const fieldTop = firstInvalid.getBoundingClientRect().top;
            const modalBodyTop = modalBody.getBoundingClientRect().top;
            const scrollOffset = fieldTop - modalBodyTop - 20; // 20px extra margin

            modalBody.scrollBy({
              top: scrollOffset,
              behavior: 'smooth'
            });
          }

          // Focus the field after scroll
          setTimeout(() => {
            firstInvalid.focus();
          }, 300);
        }

        // Show native validation messages
        form.reportValidity();
      }
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initContactFormValidation);
  } else {
    initContactFormValidation();
  }

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:page-load', initContactFormValidation);
</script>
